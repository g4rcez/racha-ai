{"version":3,"file":"../public/sw.js","mappings":";;;;;;;AAAa;AACb;AACA,qCAAqC,qBAAM,iFAAiF,qBAAM,kEAAkE,qBAAM,WAAW,mBAAO,CAAC,GAA4B;;AAEzP;;;;;;;;ACJA,YAAY,OAAO,gBAAgB,mBAAmB,MAAM,MAAM,4BAA4B,mDAAmD,+BAA+B,qDAAqD,YAAY,IAAI,mCAAmC,aAAa,KAAK,oBAAoB,SAAS,mBAAmB,IAAI,qCAAqC,eAAe,KAAK,uBAAuB,SAAS,uBAAuB,IAAI,uBAAuB,mBAAmB,uBAAuB,2CAA2C,aAAa,uBAAuB,IAAI,cAAc,SAAS,IAAI,wBAAwB,SAAS,0BAA0B,4BAA4B,qBAAqB,uBAAuB,gDAAgD,eAAe,uBAAuB,IAAI,YAAY,SAAS,IAAI,sBAAsB,SAAS,wBAAwB,SAAS,YAAY,MAAM,SAAS,2BAA2B,WAAW,OAAO,QAAQ,aAAa,cAAc,KAAK,KAAK,aAAa,cAAc,sBAAsB,MAAM,OAAO,kCAAkC,OAAO,eAAe,SAAS,IAAI,KAAK,aAAa,MAAM,YAAY,KAAK,WAAW,OAAO,QAAQ,mBAAmB,uBAAuB,oCAAoC,uBAAuB,YAAY,mBAAmB,KAAK,qBAAqB,sBAAsB,qBAAqB,yBAAyB,mBAAmB,WAAW,aAAa,8BAA8B,iCAAiC,kBAAkB,eAAe,SAAS,UAAU,aAAa,cAAc,iBAAiB,UAAU,mBAAmB,YAAY,WAAW,sBAAsB,0BAA0B,YAAY,uBAAuB,2BAA2B,wBAAwB,UAAU,sBAAsB,qDAAqD,iBAAiB,WAAW,oBAAoB,mDAAmD,mBAAmB,YAAY,SAAS,gCAAgC,WAAW,kBAAkB,iBAAiB,YAAY,YAAY,WAAW,IAAI,sCAAsC,QAAQ,QAAQ,iBAAiB,iBAAiB,mEAAmE,SAAS,KAAK,+BAA+B,iBAAiB;;;;;;UCAt4E;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA,GAAG;UACH;UACA;;UAEA;UACA;UACA;;;;;WC5BA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;;;;;;ACPD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,mBAAmB,YAAY;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA,uBAAuB,gBAAgB,UAAU,cAAc;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,gBAAgB,UAAU,cAAc;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,OAAO,UAAU,cAAc;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEwB;;;AC/MxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,yCAAyC;AACjE;AACA;AACA;AACA,uBAAuB,UAAU,+DAA+D,uBAAuB,2BAA2B,sBAAsB;AACxK,KAAK;AACL,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,iCAAiC,UAAU,sBAAsB,WAAW,GAAG,UAAU,GAAG,SAAS;AACrG,KAAK;AACL,yBAAyB,0DAA0D;AACnF;AACA;AACA;AACA,4CAA4C,UAAU;AACtD,iCAAiC,UAAU,sBAAsB,WAAW,GAAG,aAAa,OAAO,SAAS,sBAAsB,aAAa;AAC/I,KAAK;AACL,0BAA0B,qFAAqF;AAC/G;AACA;AACA;AACA,4CAA4C,UAAU;AACtD;AACA,6CAA6C,WAAW,GAAG,aAAa,EAAE,SAAS,mCAAmC,kBAAkB;AACxI;AACA,iCAAiC,UAAU,sBAAsB,WAAW,GAAG,aAAa,EAAE,SAAS,wCAAwC,kBAAkB;AACjK,KAAK;AACL,2BAA2B,4DAA4D;AACvF;AACA;AACA;AACA,kBAAkB,WAAW,GAAG,UAAU,GAAG,SAAS,wBAAwB,UAAU,2BAA2B,eAAe;AAClI,KAAK;AACL,4CAA4C,OAAO;AACnD,yHAAyH,sBAAsB;AAC/I,KAAK;AACL,gDAAgD,yBAAyB;AACzE;AACA;AACA;AACA,qHAAqH,YAAY;AACjI,KAAK;AACL,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA,+GAA+G,mBAAmB;AAClI,KAAK;AACL,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA,+FAA+F,EAAE,YAAY,QAAQ,0BAA0B,sBAAsB;AACrK,KAAK;AACL,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA,4GAA4G,OAAO;AACnH,KAAK;AACL;AACA;AACA,KAAK;AACL,8BAA8B,MAAM;AACpC,uDAAuD,KAAK;AAC5D,KAAK;AACL,+BAA+B,MAAM;AACrC,kCAAkC,KAAK;AACvC,KAAK;AACL,uCAAuC,uBAAuB;AAC9D,uBAAuB,WAAW,6CAA6C,UAAU;AACzF,KAAK;AACL,iCAAiC,4CAA4C;AAC7E,gCAAgC,UAAU,iEAAiE,WAAW,GAAG,UAAU,GAAG,UAAU;AAChJ,KAAK;AACL,6BAA6B,kEAAkE;AAC/F,gCAAgC,UAAU,mCAAmC,cAAc,uBAAuB,sBAAsB,+BAA+B,WAAW,GAAG,UAAU,GAAG,SAAS;AAC3M,KAAK;AACL,sCAAsC,iCAAiC;AACvE,qFAAqF,WAAW,GAAG,UAAU,GAAG,SAAS;AACzH,KAAK;AACL,uCAAuC,iCAAiC;AACxE,6EAA6E,WAAW,GAAG,UAAU,GAAG,SAAS;AACjH,KAAK;AACL,yBAAyB,iCAAiC;AAC1D;AACA;AACA;AACA,2CAA2C,UAAU,0HAA0H,WAAW,GAAG,SAAS;AACtM,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA,gHAAgH,sBAAsB;AACtI,KAAK;AACL,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA,8IAA8I,sBAAsB;AACpK,KAAK;AACL,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA,gJAAgJ,sBAAsB;AACtK,KAAK;AACL;AACA;AACA,KAAK;AACL,gCAAgC,kBAAkB;AAClD,6BAA6B,MAAM,aAAa,IAAI,kFAAkF,MAAM;AAC5I,KAAK;AACL,2CAA2C,aAAa;AACxD,mCAAmC,IAAI,qBAAqB,OAAO;AACnE,KAAK;AACL,qCAAqC,KAAK;AAC1C,iDAAiD,IAAI;AACrD,KAAK;AACL,sBAAsB,YAAY;AAClC,yEAAyE,IAAI;AAC7E;AACA,mDAAmD,MAAM;AACzD;AACA;AACA,KAAK;AACL,kCAAkC,aAAa;AAC/C,8CAA8C,IAAI,UAAU,oCAAoC,OAAO,SAAS;AAChH,KAAK;AACL,4BAA4B,KAAK;AACjC,2CAA2C,IAAI;AAC/C,KAAK;AACL,oDAAoD,KAAK;AACzD,qHAAqH,KAAK;AAC1H,KAAK;AACL,iCAAiC,gBAAgB;AACjD,yDAAyD,WAAW,MAAM,IAAI;AAC9E,KAAK;AACL,qCAAqC,QAAQ;AAC7C,iIAAiI,OAAO;AACxI,KAAK;AACL,gCAAgC,MAAM;AACtC,+EAA+E,KAAK;AACpF;AACA,sBAAsB,SAAS;AAC/B;AACA,kBAAkB,SAAS;AAC3B;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,qBAAqB;AAC3C;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,4DAA4D,KAAK;AACjE;AACA;AACA;AACA,yBAAyB,KAAqC,cAAc,CAAiB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,4BAA4B;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,KAAqC,UAAU,CAOzE;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,0BAAM,GAAG,KAAqC,UAAU,CAyD1D;;AAEJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEuJ;;;ACxakC;;AAEzL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,eAAU;AACpB;AACA,eAAe,UAAY;AAC3B,KAAK;AACL;AACA,eAAe,UAAY;AAC3B,KAAK;AACL;AACA,eAAe,UAAY;AAC3B,KAAK;AACL;AACA,eAAe,UAAY;AAC3B,KAAK;AACL;AACA,eAAe,UAAY;AAC3B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,4BAA4B;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kCAAkC;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,KAAqC,EAAE,EAM1C;AACL,IAAI,mBAAmB;AACvB,QAAQ,KAAqC,EAAE,EAE1C;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,KAAqC,EAAE,EA0B1C;AACL,IAAI,UAAY;AAChB;;AAEmG;;;AClJlB;AAC0D;;AAE3I;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO,4BAAa;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4BAAa;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,4BAAa;AACzB,UAAU;AACV,YAAY,4BAAa;AACzB;AACA;AACA,WAAW,4BAAa;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,KAAqC,EAAE,EAE1C;AACL,2BAA2B,mBAAmB;AAC9C;AACA,YAAY,KAAqC,EAAE,EAE1C;AACT;AACA,QAAQ,KAAqC,EAAE,EAE1C;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,gBAAgB;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEoL;;;ACpOpiCAAiC,yCAAyC,IAAI;AAC9E;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,UAAU,IAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,CAAC;;AAEyC;;;AChT4C;AACzD;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,MAAM;AACnC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAa1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAaqC,EAAE,EAa1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8CAA8C,IAAI;AAC5E;AACA;AACA,sBAAsB,YAAY;AAClC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAa1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAa1C;AACT;AACA;AACA;AACA;AACA;AACA,OAAO,6BAA6B;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,6BAA6B;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,2CAA2C;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAE1C;AACT;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAqC,EAAE,EAE1C;AACjB,cAAc;AACd;AACA,oBAAoB,KAAqC,EAAE,EAE1C;AACjB,0BAA0B,YAAY;AACtC;AACA,iBAAiB;AACjB;AACA;AACA,YAAY,KAAqC,EAAE,EAE1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,WAAW,GAAG,WAAW;AAClF,cAAc;AACd;AACA;AACA,oBAAoB,KAAqC,EAAE,EAE1C;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,WAAW,GAAG,WAAW;AAC9D,wBAAwB,KAAqC,EAAE,EAE1C;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS;AACvC;AACA;AACA,SAAS;AACT;AACA;;AAEoE;;;AChsBkB;;AAEtF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA;AACA,QAAQ,KAAqC,EAAE,EAO1C;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAY1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,uBAAuB,IAAI;AAC3B,YAAY,KAAqC,EAAE,EAa1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAqC,EAAE,EAE1C;AACjB;AACA;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA;AACA,YAAY,KAAqC,EAAE,EAE1C;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAO1C;AACT,yBAAyB,KAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAqC,EAAE,EAE1C;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gBAAgB;AAC7C;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC,oBAAoB,KAAqC,EAAE,EAE1C;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA;AACA,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,KAAqC,EAAE,EAa1C;AACT;AACA;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAI1C;AACb;AACA;AACA,YAAY,KAAqC,EAAE,EAY1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,KAAqC,EAAE,EAO1C;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,KAAqC,EAAE,EAO1C;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iCAAiC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,oBAAoB,KAAqC,EAAE,EAM1C;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EA+B1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV,sBAAsB,YAAY;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAgB1C;AACT,iCAAiC,KAAK;AACtC,gBAAgB,KAAqC,EAAE,EAI1C;AACb;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE0G;;;AC/sBsE;;AAEhL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA,oBAAoB,KAAqC,EAAE,EAE1C;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,UAAU;AACV;AACA,0BAA0B,YAAY;AACtC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,UAAU;AACV,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAM1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA,YAAY,KAAqC,EAAE,EAY1C;AACT;AACA,gBAAgB,KAAqC,EAAE,EAE1C;AACb,sBAAsB,YAAY;AAClC,qBAAqB,cAAc;AACnC,aAAa;AACb;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA;AACA,gBAAgB,0BAA0B;AAC1C;AACA;AACA,2DAA2D,sBAAsB;AACjF;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAE1C;AACT;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,0BAA0B,0BAA0B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa,IAAI,KAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAU1C;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,yBAAyB,UAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,YAAY;AACtC;AACA,iBAAiB;AACjB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,aAAQ;AACd,qDAAqD,cAAc,iBAAiB,cAAc,cAAc;AAChH;AACA;AACA,YAAY,0BAAM;AAClB,YAAY,0BAAM;AAClB,YAAY,0BAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAM1C;AACb,UAAU;AACV,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA,sBAAsB,YAAY;AAClC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA,YAAY,KAAqC,EAAE,EAS1C;AACT;AACA,sBAAsB,YAAY;AAClC;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAS1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA,sBAAsB,YAAY;AAClC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA,oBAAoB,KAAqC,EAAE,EAE1C;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mCAAmC;AACpE;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAM1C;AACT;AACA;AACA,gBAAgB,KAAqC,EAAE,EAM1C;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,OAAO;AAC9C;AACA;AACA;AACA;AACA,wEAAwE,6BAA6B;AACrG;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAS1C;AACT;AACA,sBAAsB,YAAY;AAClC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAE1C;AACb,UAAU;AACV,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA,sBAAsB,YAAY;AAClC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAE6G;;;AC1iC7C;AACmB;AAClC;AACe;;AAEhE;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,6BAAkB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,oBAAoB,KAAqC,EAAE,EAE1C;AACjB,cAAc;AACd;AACA,oBAAoB,KAAqC,EAAE,EAE1C;AACjB;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAE1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,KAAK;AAC1B,wBAAwB,WAAW;AACnC;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,KAAK;AAC1B,wBAAwB,YAAY;AACpC;AACA,KAAK;AACL,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,KAAK;AAC1B,wBAAwB,YAAY;AACpC;AACA,KAAK;AACL,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,KAAK;AAC1B,wBAAwB,YAAY;AACpC;AACA,KAAK;AACL,eAAe,KAAK;AACpB;AACA;AACA;AACA,oCAAoC;AACpC,sBAAsB,UAAiB;AACvC,6BAA6B,oBAAoB;AACjD,0BAA0B,6BAAkB;AAC5C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,MAAM;AAC7B;AACA;AACA;AACA;AACA;;AAEsB;;;ACrK0B;;AAEhD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAqC,EAAE,EAE1C;AACjB,aAAa;AACb,SAAS;AACT,MAAM;AACN,YAAY,KAAqC,EAAE,EAE1C;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAqC,EAAE,EAE1C;AACjB,aAAa;AACb,SAAS;AACT,MAAM;AACN,YAAY,KAAqC,EAAE,EAE1C;AACT;AACA;;AAEwC;;;AC7D4E;AACvE;AACE;AACS;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,mCAAmC,QAAQ;AAC3C;AACA;AACA,iCAAiC,UAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU;AAC3C,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,4BAA4B,UAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAqC,EAAE,EAI1C;AACjB;AACA,UAAU;AACV;AACA;AACA,sBAAsB,YAAY;AAClC;AACA;AACA,aAAa;AACb;AACA,YAAY,KAAqC,EAAE,EAa1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gBAAgB;AAChD;AACA;AACA;AACA;AACA;AACA,wCAAwC,8BAA8B;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgB;AAC5B;AACA,kBAAkB,YAAY;AAC9B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,eAAe,gBAAgB,yCAAyC;AACpI;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB,MAAM,gCAAgC;AAC1F;AACA,2BAA2B,uBAAuB,WAAW,+CAA+C;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAoD,IAAI;AAC5E;AACA,uBAAuB,UAAiB;AACxC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA,0BAA0B,YAAY;AACtC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,YAAY;AAC1C;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,2BAA2B;AACvH,oBAAoB,IAAqC;AACzD;AACA;AACA;AACA,kBAAkB,KAAK,EAEN;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA,oBAAoB,8BAA8B;AAClD,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iCAAiC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,sEAAsE,IAAI;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,KAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,UAAiB;AAC3C;AACA,gBAAgB,KAAqC,EAAE,EAI1C;AACb,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE2N;;;ACp5BxG;;AAEnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,KAAqC,EAAE,EAI1C;AACL;AACA;AACA,KAAK;AACL;AACA,YAAY,KAAqC,EAAE,EAG1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAoD,IAAI;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAmB1C;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAE1C;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,qBAAqB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,WAAW;AACnB;AACA;;AAEyE;;;AChNa;;AAEtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,YAAY,KAAqC,EAAE,EAwB1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,KAAqC,EAAE,EAqB1C;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEsD;;;AChIgE;AAC/E;AACoB;;AAE3D,MAAM,YAAO;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB,GAAG,kBAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,MAAM,CAAC,YAAO;AAC3C;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,YAAY,KAAqC,EAAE,EA8B1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAW1C;AACT;AACA;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAK1C;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,YAAY,KAAqC,EAAE,EAwB1C;AACT;AACA;AACA;AACA;AACA,YAAY,0BAA0B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,UAAiB;AAC3C,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,2CAA2C;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,WAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,oBAAoB,KAAqC,EAAE,EAK1C;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD,YAAY,KAAqC,EAAE,EAa1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE6C;;;ACzgByB;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,KAAqC,EAAE,EAM1C;AACL;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,KAAqC,EAAE,EAM1C;AACL;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC,EAAE,EAW1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6DAA6D,0BAA0B,GAAG,4BAA4B,QAAQ,kBAAkB;AAChJ;AACA,MAAM;AACN,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,yBAAyB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEsD;;;ACpLY;AACA;AACb;AAC0E;AAC7D;AACF;AACE;AACI;AACf;AACO;AAC+C;;AAE7G;AACA;AACA;;AAEA,qBAAqB,0CAA0C;AAC/D,IAAI,gBAAgB,gBAAgB,eAAe;AACnD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;;AAEA,4BAA4B,0GAA0G;AACtI;AACA;AACA;AACA;AACA;AACA,QAAQ,gBAAgB;AACxB;AACA,qCAAqC,qBAAqB;AAC1D;AACA,QAAQ,aAAa,KAAK,eAAe,CAAC,uBAAuB;AACjE;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA,cAAc;AACd,aAAa;AACb,gBAAgB;AAChB,eAAe;AACf,wBAAwB;AACxB;AACA;AACA;AACA;AACA,oBAAoB,yKAAyK,mBAAmB;AAChN;AACA,YAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,oBAAoB;AAC9D,2CAA2C,qBAAqB;AAChE;AACA;AACA;AACA,qBAAqB;AACrB,6CAA6C,uBAAuB;AACpE,sCAAsC,gBAAgB;AACtD,4CAA4C,sBAAsB;AAClE,wCAAwC,mBAAmB;AAC3D;AACA,aAAa;AACb,UAAU;AACV,YAAY,aAAa;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,sUAAsU;AACpW;AACA,2BAA2B,MAAM;AACjC,+BAA+B,mBAAmB;AAClD;AACA,KAAK;AACL;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sCAAsC,UAAU;AAChD,UAAU;AACV,YAAY,UAAU;AACtB;AACA;AACA;AACA;;AAE+F;;;;;UCrJ9EA;QACFC,aAAaC,OAAOA,CAACC,GAAG,CAACC,sBAAsB,IAAI;QACnDC,aAAaH,OAAOA,CAACC,GAAG,CAACG,uBAAuB,IAAI;QACpDC,UAAUL,OAAOA,CAACC,GAAG,CAACK,IAAI,KAAK;QAC/BC,UAAUP,OAAmC,IAAI,CAAO;AACvE,GALiBF,QAAAA;;;ACAoC;AAER;AACb;AAShC,IAAI,CAACA,GAAGA,CAACO,OAAO,EAAE;IAChBK,cAAcA,CAAC;QACbC,iBAAiBC,KAAKC,aAAa;QACnCC,aAAa;QACbC,cAAc;QACdC,mBAAmB;QACnBC,gBAAgBR,YAAYA;IAC9B;AACF","sources":["webpack://_N_E/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/build/polyfills/process.js","webpack://_N_E/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/process/browser.js","webpack://_N_E/webpack/bootstrap","webpack://_N_E/webpack/runtime/global","webpack://_N_E/./node_modules/.pnpm/@serwist+next@8.4.3_next@14.1.0_webpack@5.90.0/node_modules/@serwist/next/dist/index.browser.js","webpack://_N_E/./node_modules/.pnpm/@serwist+core@8.4.3/node_modules/@serwist/core/dist/quotaErrorCallbacks.js","webpack://_N_E/./node_modules/.pnpm/@serwist+core@8.4.3/node_modules/@serwist/core/dist/index.js","webpack://_N_E/./node_modules/.pnpm/@serwist+core@8.4.3/node_modules/@serwist/core/dist/index.internal.js","webpack://_N_E/./node_modules/.pnpm/idb@8.0.0/node_modules/idb/build/index.js","webpack://_N_E/./node_modules/.pnpm/@serwist+background-sync@8.4.3/node_modules/@serwist/background-sync/dist/index.js","webpack://_N_E/./node_modules/.pnpm/@serwist+routing@8.4.3/node_modules/@serwist/routing/dist/index.js","webpack://_N_E/./node_modules/.pnpm/@serwist+strategies@8.4.3/node_modules/@serwist/strategies/dist/index.js","webpack://_N_E/./node_modules/.pnpm/@serwist+google-analytics@8.4.3/node_modules/@serwist/google-analytics/dist/initialize.js","webpack://_N_E/./node_modules/.pnpm/@serwist+navigation-preload@8.4.3/node_modules/@serwist/navigation-preload/dist/index.js","webpack://_N_E/./node_modules/.pnpm/@serwist+precaching@8.4.3/node_modules/@serwist/precaching/dist/index.js","webpack://_N_E/./node_modules/.pnpm/@serwist+broadcast-update@8.4.3/node_modules/@serwist/broadcast-update/dist/index.js","webpack://_N_E/./node_modules/.pnpm/@serwist+cacheable-response@8.4.3/node_modules/@serwist/cacheable-response/dist/index.js","webpack://_N_E/./node_modules/.pnpm/@serwist+expiration@8.4.3/node_modules/@serwist/expiration/dist/index.js","webpack://_N_E/./node_modules/.pnpm/@serwist+range-requests@8.4.3/node_modules/@serwist/range-requests/dist/index.js","webpack://_N_E/./node_modules/.pnpm/@serwist+sw@8.4.3/node_modules/@serwist/sw/dist/index.js","webpack://_N_E/./src/lib/Env.ts","webpack://_N_E/./src/app/sw.ts"],"sourcesContent":["\"use strict\";\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = global.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = global.process) == null ? void 0 : _global_process1.env) === \"object\" ? global.process : require(\"next/dist/compiled/process\");\n\n//# sourceMappingURL=process.js.map","(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// Serwist RuntimeCaching config: https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-build#.RuntimeCachingEntry\nconst defaultCache = [\n    {\n        urlPattern: /^https:\\/\\/fonts\\.(?:gstatic)\\.com\\/.*/i,\n        handler: \"CacheFirst\",\n        options: {\n            cacheName: \"google-fonts-webfonts\",\n            expiration: {\n                maxEntries: 4,\n                maxAgeSeconds: 365 * 24 * 60 * 60\n            }\n        }\n    },\n    {\n        urlPattern: /^https:\\/\\/fonts\\.(?:googleapis)\\.com\\/.*/i,\n        handler: \"StaleWhileRevalidate\",\n        options: {\n            cacheName: \"google-fonts-stylesheets\",\n            expiration: {\n                maxEntries: 4,\n                maxAgeSeconds: 7 * 24 * 60 * 60\n            }\n        }\n    },\n    {\n        urlPattern: /\\.(?:eot|otf|ttc|ttf|woff|woff2|font.css)$/i,\n        handler: \"StaleWhileRevalidate\",\n        options: {\n            cacheName: \"static-font-assets\",\n            expiration: {\n                maxEntries: 4,\n                maxAgeSeconds: 7 * 24 * 60 * 60\n            }\n        }\n    },\n    {\n        urlPattern: /\\.(?:jpg|jpeg|gif|png|svg|ico|webp)$/i,\n        handler: \"StaleWhileRevalidate\",\n        options: {\n            cacheName: \"static-image-assets\",\n            expiration: {\n                maxEntries: 64,\n                maxAgeSeconds: 30 * 24 * 60 * 60\n            }\n        }\n    },\n    {\n        urlPattern: /\\/_next\\/static.+\\.js$/i,\n        handler: \"CacheFirst\",\n        options: {\n            cacheName: \"next-static-js-assets\",\n            expiration: {\n                maxEntries: 64,\n                maxAgeSeconds: 24 * 60 * 60\n            }\n        }\n    },\n    {\n        urlPattern: /\\/_next\\/image\\?url=.+$/i,\n        handler: \"StaleWhileRevalidate\",\n        options: {\n            cacheName: \"next-image\",\n            expiration: {\n                maxEntries: 64,\n                maxAgeSeconds: 24 * 60 * 60\n            }\n        }\n    },\n    {\n        urlPattern: /\\.(?:mp3|wav|ogg)$/i,\n        handler: \"CacheFirst\",\n        options: {\n            rangeRequests: true,\n            cacheName: \"static-audio-assets\",\n            expiration: {\n                maxEntries: 32,\n                maxAgeSeconds: 24 * 60 * 60\n            }\n        }\n    },\n    {\n        urlPattern: /\\.(?:mp4|webm)$/i,\n        handler: \"CacheFirst\",\n        options: {\n            rangeRequests: true,\n            cacheName: \"static-video-assets\",\n            expiration: {\n                maxEntries: 32,\n                maxAgeSeconds: 24 * 60 * 60\n            }\n        }\n    },\n    {\n        urlPattern: /\\.(?:js)$/i,\n        handler: \"StaleWhileRevalidate\",\n        options: {\n            cacheName: \"static-js-assets\",\n            expiration: {\n                maxEntries: 48,\n                maxAgeSeconds: 24 * 60 * 60\n            }\n        }\n    },\n    {\n        urlPattern: /\\.(?:css|less)$/i,\n        handler: \"StaleWhileRevalidate\",\n        options: {\n            cacheName: \"static-style-assets\",\n            expiration: {\n                maxEntries: 32,\n                maxAgeSeconds: 24 * 60 * 60\n            }\n        }\n    },\n    {\n        urlPattern: /\\/_next\\/data\\/.+\\/.+\\.json$/i,\n        handler: \"StaleWhileRevalidate\",\n        options: {\n            cacheName: \"next-data\",\n            expiration: {\n                maxEntries: 32,\n                maxAgeSeconds: 24 * 60 * 60\n            }\n        }\n    },\n    {\n        urlPattern: /\\.(?:json|xml|csv)$/i,\n        handler: \"NetworkFirst\",\n        options: {\n            cacheName: \"static-data-assets\",\n            expiration: {\n                maxEntries: 32,\n                maxAgeSeconds: 24 * 60 * 60\n            }\n        }\n    },\n    {\n        urlPattern: ({ sameOrigin, url: { pathname } })=>{\n            // Exclude /api/auth/callback/* to fix OAuth workflow in Safari without having an impact on other environments\n            // The above route is the default for next-auth, you may need to change it if your OAuth workflow has a different callback route\n            // Issue: https://github.com/shadowwalker/next-pwa/issues/131#issuecomment-821894809\n            if (!sameOrigin || pathname.startsWith(\"/api/auth/callback\")) {\n                return false;\n            }\n            if (pathname.startsWith(\"/api/\")) {\n                return true;\n            }\n            return false;\n        },\n        handler: \"NetworkFirst\",\n        method: \"GET\",\n        options: {\n            cacheName: \"apis\",\n            expiration: {\n                maxEntries: 16,\n                maxAgeSeconds: 24 * 60 * 60\n            },\n            networkTimeoutSeconds: 10\n        }\n    },\n    {\n        urlPattern: ({ request, url: { pathname }, sameOrigin })=>request.headers.get(\"RSC\") === \"1\" && request.headers.get(\"Next-Router-Prefetch\") === \"1\" && sameOrigin && !pathname.startsWith(\"/api/\"),\n        handler: \"NetworkFirst\",\n        options: {\n            cacheName: \"pages-rsc-prefetch\",\n            expiration: {\n                maxEntries: 32,\n                maxAgeSeconds: 24 * 60 * 60\n            }\n        }\n    },\n    {\n        urlPattern: ({ request, url: { pathname }, sameOrigin })=>request.headers.get(\"RSC\") === \"1\" && sameOrigin && !pathname.startsWith(\"/api/\"),\n        handler: \"NetworkFirst\",\n        options: {\n            cacheName: \"pages-rsc\",\n            expiration: {\n                maxEntries: 32,\n                maxAgeSeconds: 24 * 60 * 60\n            }\n        }\n    },\n    {\n        urlPattern: ({ url: { pathname }, sameOrigin })=>sameOrigin && !pathname.startsWith(\"/api/\"),\n        handler: \"NetworkFirst\",\n        options: {\n            cacheName: \"pages\",\n            expiration: {\n                maxEntries: 32,\n                maxAgeSeconds: 24 * 60 * 60\n            }\n        }\n    },\n    {\n        urlPattern: ({ sameOrigin })=>!sameOrigin,\n        handler: \"NetworkFirst\",\n        options: {\n            cacheName: \"cross-origin\",\n            expiration: {\n                maxEntries: 32,\n                maxAgeSeconds: 60 * 60\n            },\n            networkTimeoutSeconds: 10\n        }\n    }\n];\n\nexport { defaultCache };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ const _cacheNameDetails = {\n    googleAnalytics: \"googleAnalytics\",\n    precache: \"precache-v2\",\n    prefix: \"serwist\",\n    runtime: \"runtime\",\n    suffix: typeof registration !== \"undefined\" ? registration.scope : \"\"\n};\nconst _createCacheName = (cacheName)=>{\n    return [\n        _cacheNameDetails.prefix,\n        cacheName,\n        _cacheNameDetails.suffix\n    ].filter((value)=>value && value.length > 0).join(\"-\");\n};\nconst eachCacheNameDetail = (fn)=>{\n    for (const key of Object.keys(_cacheNameDetails)){\n        fn(key);\n    }\n};\nconst cacheNames = {\n    updateDetails: (details)=>{\n        eachCacheNameDetail((key)=>{\n            const detail = details[key];\n            if (typeof detail === \"string\") {\n                _cacheNameDetails[key] = detail;\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName)=>{\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName)=>{\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: ()=>{\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName)=>{\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: ()=>{\n        return _cacheNameDetails.suffix;\n    }\n};\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ const messages = {\n    \"invalid-value\": ({ paramName, validValueDescription, value })=>{\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return `The '${paramName}' parameter was given a value with an ` + `unexpected value. ${validValueDescription} Received a value of ` + `${JSON.stringify(value)}.`;\n    },\n    \"not-an-array\": ({ moduleName, className, funcName, paramName })=>{\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${className}.${funcName}()' must be an array.`;\n    },\n    \"incorrect-type\": ({ expectedType, paramName, moduleName, className, funcName })=>{\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        const classNameStr = className ? `${className}.` : \"\";\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}` + `${funcName}()' must be of type ${expectedType}.`;\n    },\n    \"incorrect-class\": ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem })=>{\n        if (!expectedClassName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        const classNameStr = className ? `${className}.` : \"\";\n        if (isReturnValueProblem) {\n            return `The return value from '${moduleName}.${classNameStr}${funcName}()' must be an instance of class ${expectedClassName}.`;\n        }\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}${funcName}()' ` + `must be an instance of class ${expectedClassName}.`;\n    },\n    \"missing-a-method\": ({ expectedMethod, paramName, moduleName, className, funcName })=>{\n        if (!expectedMethod || !paramName || !moduleName || !className || !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return `${moduleName}.${className}.${funcName}() expected the ` + `'${paramName}' parameter to expose a '${expectedMethod}' method.`;\n    },\n    \"add-to-cache-list-unexpected-type\": ({ entry })=>{\n        return `An unexpected entry was passed to '@serwist/precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(entry)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`;\n    },\n    \"add-to-cache-list-conflicting-entries\": ({ firstEntry, secondEntry })=>{\n        if (!firstEntry || !secondEntry) {\n            throw new Error(\"Unexpected input to \" + `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return `Two of the entries passed to '@serwist/precaching.PrecacheController.addToCacheList()' had the URL ${firstEntry} but different revision details. Serwist is unable to cache and version the asset correctly. Please remove one of the entries.`;\n    },\n    \"plugin-error-request-will-fetch\": ({ thrownErrorMessage })=>{\n        if (!thrownErrorMessage) {\n            throw new Error(\"Unexpected input to \" + `'plugin-error-request-will-fetch', error.`);\n        }\n        return `An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${thrownErrorMessage}'.`;\n    },\n    \"invalid-cache-name\": ({ cacheNameId, value })=>{\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return `You must provide a name containing at least one character for setCacheDetails({${cacheNameId}: '...'}). Received a value of '${JSON.stringify(value)}'`;\n    },\n    \"unregister-route-but-not-found-with-method\": ({ method })=>{\n        if (!method) {\n            throw new Error(\"Unexpected input to \" + `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return `The route you're trying to unregister was not  previously registered for the method type '${method}'.`;\n    },\n    \"unregister-route-route-not-registered\": ()=>{\n        return `The route you're trying to unregister was not previously ` + \"registered.\";\n    },\n    \"queue-replay-failed\": ({ name })=>{\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    \"duplicate-queue-name\": ({ name })=>{\n        return `The Queue name '${name}' is already being used. All instances of backgroundSync.Queue must be given unique names.`;\n    },\n    \"expired-test-without-max-age\": ({ methodName, paramName })=>{\n        return `The '${methodName}()' method can only be used when the ` + `'${paramName}' is used in the constructor.`;\n    },\n    \"unsupported-route-type\": ({ moduleName, className, funcName, paramName })=>{\n        return `The supplied '${paramName}' parameter was an unsupported type. Please check the docs for ${moduleName}.${className}.${funcName} for valid input types.`;\n    },\n    \"not-array-of-class\": ({ value, expectedClass, moduleName, className, funcName, paramName })=>{\n        return `The supplied '${paramName}' parameter must be an array of '${expectedClass}' objects. Received '${JSON.stringify(value)},'. Please check the call to ${moduleName}.${className}.${funcName}() to fix the issue.`;\n    },\n    \"max-entries-or-age-required\": ({ moduleName, className, funcName })=>{\n        return `You must define either config.maxEntries or config.maxAgeSecondsin ${moduleName}.${className}.${funcName}`;\n    },\n    \"statuses-or-headers-required\": ({ moduleName, className, funcName })=>{\n        return `You must define either config.statuses or config.headersin ${moduleName}.${className}.${funcName}`;\n    },\n    \"invalid-string\": ({ moduleName, funcName, paramName })=>{\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return `When using strings, the '${paramName}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${moduleName}.${funcName}() for more info.`;\n    },\n    \"channel-name-required\": ()=>{\n        return \"You must provide a channelName to construct a \" + \"BroadcastCacheUpdate instance.\";\n    },\n    \"invalid-responses-are-same-args\": ()=>{\n        return \"The arguments passed into responsesAreSame() appear to be \" + \"invalid. Please ensure valid Responses are used.\";\n    },\n    \"expire-custom-caches-only\": ()=>{\n        return `You must provide a 'cacheName' property when using the ` + \"expiration plugin with a runtime caching strategy.\";\n    },\n    \"unit-must-be-bytes\": ({ normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return `The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"single-range-only\": ({ normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return `Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"invalid-range-values\": ({ normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return `The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"no-range-header\": ()=>{\n        return \"No Range header was found in the Request provided.\";\n    },\n    \"range-not-satisfiable\": ({ size, start, end })=>{\n        return `The start (${start}) and end (${end}) values in the Range are ` + `not satisfiable by the cached response, which is ${size} bytes.`;\n    },\n    \"attempt-to-cache-non-get-request\": ({ url, method })=>{\n        return `Unable to cache '${url}' because it is a '${method}' request and only 'GET' requests can be cached.`;\n    },\n    \"cache-put-with-no-response\": ({ url })=>{\n        return `There was an attempt to cache '${url}' but the response was not defined.`;\n    },\n    \"no-response\": ({ url, error })=>{\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    \"bad-precaching-response\": ({ url, status })=>{\n        return `The precaching request for '${url}' failed${status ? ` with an HTTP status of ${status}.` : \".\"}`;\n    },\n    \"non-precached-url\": ({ url })=>{\n        return `createHandlerBoundToURL('${url}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`;\n    },\n    \"add-to-cache-list-conflicting-integrities\": ({ url })=>{\n        return `Two of the entries passed to '@serwist/precaching.PrecacheController.addToCacheList()' had the URL ${url} with different integrity values. Please remove one of them.`;\n    },\n    \"missing-precache-entry\": ({ cacheName, url })=>{\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    \"cross-origin-copy-response\": ({ origin })=>{\n        return `@serwist/core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${origin}.`;\n    },\n    \"opaque-streams-source\": ({ type })=>{\n        const message = `One of the @serwist/streams sources resulted in an '${type}' response.`;\n        if (type === \"opaqueredirect\") {\n            return `${message} Please do not use a navigation request that results in a redirect as a source.`;\n        }\n        return `${message} Please ensure your sources are CORS-enabled.`;\n    }\n};\n\nconst fallback = (code, ...args)=>{\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {})=>{\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nconst messageGenerator = process.env.NODE_ENV === \"production\" ? fallback : generatorFunction;\n\n/**\n * Serwist errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from Serwist\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */ class SerwistError extends Error {\n    details;\n    /**\n   *\n   * @param errorCode The error code that\n   * identifies this particular error.\n   * @param details Any relevant arguments\n   * that will help developers identify issues should\n   * be added as a key on the context object.\n   */ constructor(errorCode, details){\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ let supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @returns `true`, if the current browser can successfully construct\n * a `Response` from a `response.body` stream, `false` otherwise.\n * @private\n */ function canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response(\"\");\n        if (\"body\" in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            } catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\n\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */ const isArray = (value, details)=>{\n    if (!Array.isArray(value)) {\n        throw new SerwistError(\"not-an-array\", details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details)=>{\n    const type = typeof object[expectedMethod];\n    if (type !== \"function\") {\n        details.expectedMethod = expectedMethod;\n        throw new SerwistError(\"missing-a-method\", details);\n    }\n};\nconst isType = (object, expectedType, details)=>{\n    // biome-ignore lint/suspicious/useValidTypeof: Know to not make a mistake...\n    if (typeof object !== expectedType) {\n        details.expectedType = expectedType;\n        throw new SerwistError(\"incorrect-type\", details);\n    }\n};\nconst isInstance = (object, // biome-ignore lint/complexity/noBannedTypes: Need the general type to do the check later.\nexpectedClass, details)=>{\n    if (!(object instanceof expectedClass)) {\n        details.expectedClassName = expectedClass.name;\n        throw new SerwistError(\"incorrect-class\", details);\n    }\n};\nconst isOneOf = (value, validValues, details)=>{\n    if (!validValues.includes(value)) {\n        details.validValueDescription = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new SerwistError(\"invalid-value\", details);\n    }\n};\nconst isArrayOfClass = (value, // biome-ignore lint/complexity/noBannedTypes: Need general type to do check later.\nexpectedClass, details)=>{\n    const error = new SerwistError(\"not-array-of-class\", details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value){\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports = process.env.NODE_ENV === \"production\" ? null : {\n    hasMethod,\n    isArray,\n    isInstance,\n    isOneOf,\n    isType,\n    isArrayOfClass\n};\n\n/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ // logger is used inside of both service workers and the window global scope.\nconst logger = process.env.NODE_ENV === \"production\" ? null : (()=>{\n    // Don't overwrite this value if it's already set.\n    // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n    if (!(\"__WB_DISABLE_DEV_LOGS\" in globalThis)) {\n        self.__WB_DISABLE_DEV_LOGS = false;\n    }\n    let inGroup = false;\n    const methodToColorMap = {\n        debug: \"#7f8c8d\",\n        log: \"#2ecc71\",\n        warn: \"#f39c12\",\n        error: \"#c0392b\",\n        groupCollapsed: \"#3498db\",\n        groupEnd: null\n    };\n    const print = (method, args)=>{\n        if (self.__WB_DISABLE_DEV_LOGS) {\n            return;\n        }\n        if (method === \"groupCollapsed\") {\n            // Safari doesn't print all console.groupCollapsed() arguments:\n            // https://bugs.webkit.org/show_bug.cgi?id=182754\n            if (typeof navigator !== \"undefined\" && /^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                console[method](...args);\n                return;\n            }\n        }\n        const styles = [\n            `background: ${methodToColorMap[method]}`,\n            \"border-radius: 0.5em\",\n            \"color: white\",\n            \"font-weight: bold\",\n            \"padding: 2px 0.5em\"\n        ];\n        // When in a group, the serwist prefix is not displayed.\n        const logPrefix = inGroup ? [] : [\n            \"%cserwist\",\n            styles.join(\";\")\n        ];\n        console[method](...logPrefix, ...args);\n        if (method === \"groupCollapsed\") {\n            inGroup = true;\n        }\n        if (method === \"groupEnd\") {\n            inGroup = false;\n        }\n    };\n    // biome-ignore lint/complexity/noBannedTypes: Unknown reason\n    const api = {};\n    const loggerMethods = Object.keys(methodToColorMap);\n    for (const key of loggerMethods){\n        const method = key;\n        api[method] = (...args)=>{\n            print(method, args);\n        };\n    }\n    return api;\n})();\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ // Callbacks to be executed whenever there's a quota error.\n// biome-ignore lint/complexity/noBannedTypes: Can't change Function type right now.\nconst quotaErrorCallbacks = new Set();\n\nexport { SerwistError as S, canConstructResponseFromBodyStream as a, cacheNames as c, finalAssertExports as f, logger as l, quotaErrorCallbacks as q };\n","import { c as cacheNames$1, S as SerwistError, a as canConstructResponseFromBodyStream, f as finalAssertExports, q as quotaErrorCallbacks, l as logger } from './quotaErrorCallbacks.js';\n\n/**\n * Get the current cache names and prefix/suffix used by Workbox.\n *\n * `cacheNames.precache` is used for precached assets,\n * `cacheNames.googleAnalytics` is used by `@serwist/google-analytics` to\n * store `analytics.js`, and `cacheNames.runtime` is used for everything else.\n *\n * `cacheNames.prefix` can be used to retrieve just the current prefix value.\n * `cacheNames.suffix` can be used to retrieve just the current suffix value.\n *\n * @returns An object with `precache`, `runtime`, `prefix`, and `googleAnalytics` properties.\n */ const cacheNames = {\n    get googleAnalytics () {\n        return cacheNames$1.getGoogleAnalyticsName();\n    },\n    get precache () {\n        return cacheNames$1.getPrecacheName();\n    },\n    get prefix () {\n        return cacheNames$1.getPrefix();\n    },\n    get runtime () {\n        return cacheNames$1.getRuntimeName();\n    },\n    get suffix () {\n        return cacheNames$1.getSuffix();\n    }\n};\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ // Give TypeScript the correct global.\n/**\n * Claim any currently available clients once the service worker\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\n */ function clientsClaim() {\n    self.addEventListener(\"activate\", ()=>self.clients.claim());\n}\n\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`](https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax)\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param response\n * @param modifier\n */ async function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new SerwistError(\"cross-origin-copy-response\", {\n            origin\n        });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream() ? clonedResponse.body : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\n\n/**\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\n * there's a quota error.\n *\n * @param callback\n */ // biome-ignore lint/complexity/noBannedTypes: Can't change Function type\nfunction registerQuotaErrorCallback(callback) {\n    if (process.env.NODE_ENV !== \"production\") {\n        finalAssertExports.isType(callback, \"function\", {\n            moduleName: \"@serwist/core\",\n            funcName: \"register\",\n            paramName: \"callback\"\n        });\n    }\n    quotaErrorCallbacks.add(callback);\n    if (process.env.NODE_ENV !== \"production\") {\n        logger.log(\"Registered a callback to respond to quota errors.\", callback);\n    }\n}\n\n/**\n * Modifies the default cache names used by the Serwist packages.\n * Cache names are generated as `<prefix>-<Cache Name>-<suffix>`.\n *\n * @param details\n */ function setCacheNameDetails(details) {\n    if (process.env.NODE_ENV !== \"production\") {\n        for (const key of Object.keys(details)){\n            finalAssertExports.isType(details[key], \"string\", {\n                moduleName: \"@serwist/core\",\n                funcName: \"setCacheNameDetails\",\n                paramName: `details.${key}`\n            });\n        }\n        if (details.precache?.length === 0) {\n            throw new SerwistError(\"invalid-cache-name\", {\n                cacheNameId: \"precache\",\n                value: details.precache\n            });\n        }\n        if (details.runtime?.length === 0) {\n            throw new SerwistError(\"invalid-cache-name\", {\n                cacheNameId: \"runtime\",\n                value: details.runtime\n            });\n        }\n        if (details.googleAnalytics?.length === 0) {\n            throw new SerwistError(\"invalid-cache-name\", {\n                cacheNameId: \"googleAnalytics\",\n                value: details.googleAnalytics\n            });\n        }\n    }\n    cacheNames$1.updateDetails(details);\n}\n\nexport { cacheNames, clientsClaim, copyResponse, registerQuotaErrorCallback, setCacheNameDetails };\n","import { l as logger, q as quotaErrorCallbacks } from './quotaErrorCallbacks.js';\nexport { S as SerwistError, f as assert, a as canConstructResponseFromBodyStream, c as privateCacheNames } from './quotaErrorCallbacks.js';\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */ class Deferred {\n    promise;\n    resolve;\n    reject;\n    /**\n   * Creates a promise and exposes its resolve and reject functions as methods.\n   */ constructor(){\n        this.promise = new Promise((resolve, reject)=>{\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\n\n/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ function stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams){\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param cache\n * @param request\n * @param matchOptions\n * @param ignoreParams\n * @returns\n */ async function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = {\n        ...matchOptions,\n        ignoreSearch: true\n    };\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys){\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ let supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream)\n * object.\n *\n * @returns `true`, if the current browser can successfully construct a `ReadableStream`, `false` otherwise.\n *\n * @private\n */ function canConstructReadableStream() {\n    if (supportStatus === undefined) {\n        // See https://github.com/GoogleChrome/workbox/issues/1473\n        try {\n            new ReadableStream({\n                start () {}\n            });\n            supportStatus = true;\n        } catch (error) {\n            supportStatus = false;\n        }\n    }\n    return supportStatus;\n}\n\n/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /**\n * A helper function that prevents a promise from being flagged as unused.\n *\n * @private\n **/ function dontWaitFor(promise) {\n    // Effective no-op.\n    void promise.then(()=>{});\n}\n\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @private\n */ async function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== \"production\") {\n        logger.log(`About to run ${quotaErrorCallbacks.size} callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks){\n        await callback();\n        if (process.env.NODE_ENV !== \"production\") {\n            logger.log(callback, \"is complete.\");\n        }\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n        logger.log(\"Finished running callbacks.\");\n    }\n}\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ const getFriendlyURL = (url)=>{\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), \"\");\n};\n\n/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param ms\n * @returns\n * @private\n */ function timeout(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\n\nconst MAX_RETRY_TIME = 2000;\n/**\n * Returns a promise that resolves to a window client matching the passed\n * `resultingClientId`. For browsers that don't support `resultingClientId`\n * or if waiting for the resulting client to apper takes too long, resolve to\n * `undefined`.\n *\n * @param resultingClientId\n * @returns\n * @private\n */ async function resultingClientExists(resultingClientId) {\n    if (!resultingClientId) {\n        return;\n    }\n    let existingWindows = await self.clients.matchAll({\n        type: \"window\"\n    });\n    const existingWindowIds = new Set(existingWindows.map((w)=>w.id));\n    let resultingWindow = undefined;\n    const startTime = performance.now();\n    // Only wait up to `MAX_RETRY_TIME` to find a matching client.\n    while(performance.now() - startTime < MAX_RETRY_TIME){\n        existingWindows = await self.clients.matchAll({\n            type: \"window\"\n        });\n        resultingWindow = existingWindows.find((w)=>{\n            if (resultingClientId) {\n                // If we have a `resultingClientId`, we can match on that.\n                return w.id === resultingClientId;\n            }\n            // Otherwise match on finding a window not in `existingWindowIds`.\n            return !existingWindowIds.has(w.id);\n        });\n        if (resultingWindow) {\n            break;\n        }\n        // Sleep for 100ms and retry.\n        await timeout(100);\n    }\n    return resultingWindow;\n}\n\n/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param event\n * @param asyncFn\n * @returns\n * @private\n */ function waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\n\nexport { Deferred, cacheMatchIgnoreParams, canConstructReadableStream, dontWaitFor, executeQuotaErrorCallbacks, getFriendlyURL, logger, resultingClientExists, timeout, waitUntil };\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst transactionDoneMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(this.request);\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n\nexport { deleteDB, openDB, unwrap, wrap };\n","import { assert, SerwistError, logger, getFriendlyURL } from '@serwist/core/internal';\nimport { openDB } from 'idb';\n\nconst DB_VERSION = 3;\nconst DB_NAME = \"serwist-background-sync\";\nconst REQUEST_OBJECT_STORE_NAME = \"requests\";\nconst QUEUE_NAME_INDEX = \"queueName\";\n/**\n * A class to interact directly an IndexedDB created specifically to save and\n * retrieve QueueStoreEntries. This class encapsulates all the schema details\n * to store the representation of a Queue.\n *\n * @private\n */ class QueueDb {\n    _db = null;\n    /**\n   * Add QueueStoreEntry to underlying db.\n   *\n   * @param entry\n   */ async addEntry(entry) {\n        const db = await this.getDb();\n        const tx = db.transaction(REQUEST_OBJECT_STORE_NAME, \"readwrite\", {\n            durability: \"relaxed\"\n        });\n        await tx.store.add(entry);\n        await tx.done;\n    }\n    /**\n   * Returns the first entry id in the ObjectStore.\n   *\n   * @returns\n   */ async getFirstEntryId() {\n        const db = await this.getDb();\n        const cursor = await db.transaction(REQUEST_OBJECT_STORE_NAME).store.openCursor();\n        return cursor?.value.id;\n    }\n    /**\n   * Get all the entries filtered by index\n   *\n   * @param queueName\n   * @returns\n   */ async getAllEntriesByQueueName(queueName) {\n        const db = await this.getDb();\n        const results = await db.getAllFromIndex(REQUEST_OBJECT_STORE_NAME, QUEUE_NAME_INDEX, IDBKeyRange.only(queueName));\n        return results ? results : new Array();\n    }\n    /**\n   * Returns the number of entries filtered by index\n   *\n   * @param queueName\n   * @returns\n   */ async getEntryCountByQueueName(queueName) {\n        const db = await this.getDb();\n        return db.countFromIndex(REQUEST_OBJECT_STORE_NAME, QUEUE_NAME_INDEX, IDBKeyRange.only(queueName));\n    }\n    /**\n   * Deletes a single entry by id.\n   *\n   * @param id the id of the entry to be deleted\n   */ async deleteEntry(id) {\n        const db = await this.getDb();\n        await db.delete(REQUEST_OBJECT_STORE_NAME, id);\n    }\n    /**\n   *\n   * @param queueName\n   * @returns\n   */ async getFirstEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), \"next\");\n    }\n    /**\n   *\n   * @param queueName\n   * @returns\n   */ async getLastEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), \"prev\");\n    }\n    /**\n   * Returns either the first or the last entries, depending on direction.\n   * Filtered by index.\n   *\n   * @param direction\n   * @param query\n   * @returns\n   * @private\n   */ async getEndEntryFromIndex(query, direction) {\n        const db = await this.getDb();\n        const cursor = await db.transaction(REQUEST_OBJECT_STORE_NAME).store.index(QUEUE_NAME_INDEX).openCursor(query, direction);\n        return cursor?.value;\n    }\n    /**\n   * Returns an open connection to the database.\n   *\n   * @private\n   */ async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, DB_VERSION, {\n                upgrade: this._upgradeDb\n            });\n        }\n        return this._db;\n    }\n    /**\n   * Upgrades QueueDB\n   *\n   * @param db\n   * @param oldVersion\n   * @private\n   */ _upgradeDb(db, oldVersion) {\n        if (oldVersion > 0 && oldVersion < DB_VERSION) {\n            if (db.objectStoreNames.contains(REQUEST_OBJECT_STORE_NAME)) {\n                db.deleteObjectStore(REQUEST_OBJECT_STORE_NAME);\n            }\n        }\n        const objStore = db.createObjectStore(REQUEST_OBJECT_STORE_NAME, {\n            autoIncrement: true,\n            keyPath: \"id\"\n        });\n        objStore.createIndex(QUEUE_NAME_INDEX, QUEUE_NAME_INDEX, {\n            unique: false\n        });\n    }\n}\n\n/**\n * A class to manage storing requests from a Queue in IndexedDB,\n * indexed by their queue name for easier access.\n *\n * Most developers will not need to access this class directly;\n * it is exposed for advanced use cases.\n */ class QueueStore {\n    _queueName;\n    _queueDb;\n    /**\n   * Associates this instance with a Queue instance, so entries added can be\n   * identified by their queue name.\n   *\n   * @param queueName\n   */ constructor(queueName){\n        this._queueName = queueName;\n        this._queueDb = new QueueDb();\n    }\n    /**\n   * Append an entry last in the queue.\n   *\n   * @param entry\n   */ async pushEntry(entry) {\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isType(entry, \"object\", {\n                moduleName: \"@serwist/background-sync\",\n                className: \"QueueStore\",\n                funcName: \"pushEntry\",\n                paramName: \"entry\"\n            });\n            assert.isType(entry.requestData, \"object\", {\n                moduleName: \"@serwist/background-sync\",\n                className: \"QueueStore\",\n                funcName: \"pushEntry\",\n                paramName: \"entry.requestData\"\n            });\n        }\n        // biome-ignore lint/performance/noDelete: Don't specify an ID since one is automatically generated.\n        delete entry.id;\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    /**\n   * Prepend an entry first in the queue.\n   *\n   * @param entry\n   */ async unshiftEntry(entry) {\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isType(entry, \"object\", {\n                moduleName: \"@serwist/background-sync\",\n                className: \"QueueStore\",\n                funcName: \"unshiftEntry\",\n                paramName: \"entry\"\n            });\n            assert.isType(entry.requestData, \"object\", {\n                moduleName: \"@serwist/background-sync\",\n                className: \"QueueStore\",\n                funcName: \"unshiftEntry\",\n                paramName: \"entry.requestData\"\n            });\n        }\n        const firstId = await this._queueDb.getFirstEntryId();\n        if (firstId) {\n            // Pick an ID one less than the lowest ID in the object store.\n            entry.id = firstId - 1;\n        } else {\n            // biome-ignore lint/performance/noDelete: Let the auto-incrementor assign the ID.\n            delete entry.id;\n        }\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    /**\n   * Removes and returns the last entry in the queue matching the `queueName`.\n   *\n   * @returns\n   */ async popEntry() {\n        return this._removeEntry(await this._queueDb.getLastEntryByQueueName(this._queueName));\n    }\n    /**\n   * Removes and returns the first entry in the queue matching the `queueName`.\n   *\n   * @returns\n   */ async shiftEntry() {\n        return this._removeEntry(await this._queueDb.getFirstEntryByQueueName(this._queueName));\n    }\n    /**\n   * Returns all entries in the store matching the `queueName`.\n   *\n   * @returns\n   */ async getAll() {\n        return await this._queueDb.getAllEntriesByQueueName(this._queueName);\n    }\n    /**\n   * Returns the number of entries in the store matching the `queueName`.\n   *\n   * @returns\n   */ async size() {\n        return await this._queueDb.getEntryCountByQueueName(this._queueName);\n    }\n    /**\n   * Deletes the entry for the given ID.\n   *\n   * WARNING: this method does not ensure the deleted entry belongs to this\n   * queue (i.e. matches the `queueName`). But this limitation is acceptable\n   * as this class is not publicly exposed. An additional check would make\n   * this method slower than it needs to be.\n   *\n   * @param id\n   */ async deleteEntry(id) {\n        await this._queueDb.deleteEntry(id);\n    }\n    /**\n   * Removes and returns the first or last entry in the queue (based on the\n   * `direction` argument) matching the `queueName`.\n   *\n   * @returns\n   * @private\n   */ async _removeEntry(entry) {\n        if (entry) {\n            await this.deleteEntry(entry.id);\n        }\n        return entry;\n    }\n}\n\nconst serializableProperties = [\n    \"method\",\n    \"referrer\",\n    \"referrerPolicy\",\n    \"mode\",\n    \"credentials\",\n    \"cache\",\n    \"redirect\",\n    \"integrity\",\n    \"keepalive\"\n];\n/**\n * A class to make it easier to serialize and de-serialize requests so they\n * can be stored in IndexedDB.\n *\n * Most developers will not need to access this class directly;\n * it is exposed for advanced use cases.\n */ class StorableRequest {\n    _requestData;\n    /**\n   * Converts a Request object to a plain object that can be structured\n   * cloned or JSON-stringified.\n   *\n   * @param request\n   * @returns\n   */ static async fromRequest(request) {\n        const requestData = {\n            url: request.url,\n            headers: {}\n        };\n        // Set the body if present.\n        if (request.method !== \"GET\") {\n            // Use ArrayBuffer to support non-text request bodies.\n            // NOTE: we can't use Blobs becuse Safari doesn't support storing\n            // Blobs in IndexedDB in some cases:\n            // https://github.com/dfahlander/Dexie.js/issues/618#issuecomment-398348457\n            requestData.body = await request.clone().arrayBuffer();\n        }\n        request.headers.forEach((value, key)=>{\n            requestData.headers[key] = value;\n        });\n        // Add all other serializable request properties\n        for (const prop of serializableProperties){\n            if (request[prop] !== undefined) {\n                requestData[prop] = request[prop];\n            }\n        }\n        return new StorableRequest(requestData);\n    }\n    /**\n   * Accepts an object of request data that can be used to construct a\n   * `Request` but can also be stored in IndexedDB.\n   *\n   * @param requestData An object of request data that includes the `url` plus any relevant properties of\n   * [requestInit](https://fetch.spec.whatwg.org/#requestinit).\n   */ constructor(requestData){\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isType(requestData, \"object\", {\n                moduleName: \"@serwist/background-sync\",\n                className: \"StorableRequest\",\n                funcName: \"constructor\",\n                paramName: \"requestData\"\n            });\n            assert.isType(requestData.url, \"string\", {\n                moduleName: \"@serwist/background-sync\",\n                className: \"StorableRequest\",\n                funcName: \"constructor\",\n                paramName: \"requestData.url\"\n            });\n        }\n        // If the request's mode is `navigate`, convert it to `same-origin` since\n        // navigation requests can't be constructed via script.\n        if (requestData.mode === \"navigate\") {\n            requestData.mode = \"same-origin\";\n        }\n        this._requestData = requestData;\n    }\n    /**\n   * Returns a deep clone of the instances `_requestData` object.\n   *\n   * @returns\n   */ toObject() {\n        const requestData = Object.assign({}, this._requestData);\n        requestData.headers = Object.assign({}, this._requestData.headers);\n        if (requestData.body) {\n            requestData.body = requestData.body.slice(0);\n        }\n        return requestData;\n    }\n    /**\n   * Converts this instance to a Request.\n   *\n   * @returns\n   */ toRequest() {\n        return new Request(this._requestData.url, this._requestData);\n    }\n    /**\n   * Creates and returns a deep clone of the instance.\n   *\n   * @returns\n   */ clone() {\n        return new StorableRequest(this.toObject());\n    }\n}\n\nconst TAG_PREFIX = \"serwist-background-sync\";\nconst MAX_RETENTION_TIME = 60 * 24 * 7; // 7 days in minutes\nconst queueNames = new Set();\n/**\n * Converts a QueueStore entry into the format exposed by Queue. This entails\n * converting the request data into a real request and omitting the `id` and\n * `queueName` properties.\n *\n * @param queueStoreEntry\n * @returns\n * @private\n */ const convertEntry = (queueStoreEntry)=>{\n    const queueEntry = {\n        request: new StorableRequest(queueStoreEntry.requestData).toRequest(),\n        timestamp: queueStoreEntry.timestamp\n    };\n    if (queueStoreEntry.metadata) {\n        queueEntry.metadata = queueStoreEntry.metadata;\n    }\n    return queueEntry;\n};\n/**\n * A class to manage storing failed requests in IndexedDB and retrying them\n * later. All parts of the storing and replaying process are observable via\n * callbacks.\n */ class Queue {\n    _name;\n    _onSync;\n    _maxRetentionTime;\n    _queueStore;\n    _forceSyncFallback;\n    _syncInProgress = false;\n    _requestsAddedDuringSync = false;\n    /**\n   * Creates an instance of Queue with the given options\n   *\n   * @param name The unique name for this queue. This name must be\n   * unique as it's used to register sync events and store requests\n   * in IndexedDB specific to this instance. An error will be thrown if\n   * a duplicate name is detected.\n   * @param options\n   */ constructor(name, { forceSyncFallback, onSync, maxRetentionTime } = {}){\n        // Ensure the store name is not already being used\n        if (queueNames.has(name)) {\n            throw new SerwistError(\"duplicate-queue-name\", {\n                name\n            });\n        }\n        queueNames.add(name);\n        this._name = name;\n        this._onSync = onSync || this.replayRequests;\n        this._maxRetentionTime = maxRetentionTime || MAX_RETENTION_TIME;\n        this._forceSyncFallback = Boolean(forceSyncFallback);\n        this._queueStore = new QueueStore(this._name);\n        this._addSyncListener();\n    }\n    /**\n   * @returns\n   */ get name() {\n        return this._name;\n    }\n    /**\n   * Stores the passed request in IndexedDB (with its timestamp and any\n   * metadata) at the end of the queue.\n   *\n   * @param entry\n   */ async pushRequest(entry) {\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isType(entry, \"object\", {\n                moduleName: \"@serwist/background-sync\",\n                className: \"Queue\",\n                funcName: \"pushRequest\",\n                paramName: \"entry\"\n            });\n            assert.isInstance(entry.request, Request, {\n                moduleName: \"@serwist/background-sync\",\n                className: \"Queue\",\n                funcName: \"pushRequest\",\n                paramName: \"entry.request\"\n            });\n        }\n        await this._addRequest(entry, \"push\");\n    }\n    /**\n   * Stores the passed request in IndexedDB (with its timestamp and any\n   * metadata) at the beginning of the queue.\n   *\n   * @param entry\n   */ async unshiftRequest(entry) {\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isType(entry, \"object\", {\n                moduleName: \"@serwist/background-sync\",\n                className: \"Queue\",\n                funcName: \"unshiftRequest\",\n                paramName: \"entry\"\n            });\n            assert.isInstance(entry.request, Request, {\n                moduleName: \"@serwist/background-sync\",\n                className: \"Queue\",\n                funcName: \"unshiftRequest\",\n                paramName: \"entry.request\"\n            });\n        }\n        await this._addRequest(entry, \"unshift\");\n    }\n    /**\n   * Removes and returns the last request in the queue (along with its\n   * timestamp and any metadata). The returned object takes the form:\n   * `{request, timestamp, metadata}`.\n   *\n   * @returns\n   */ async popRequest() {\n        return this._removeRequest(\"pop\");\n    }\n    /**\n   * Removes and returns the first request in the queue (along with its\n   * timestamp and any metadata). The returned object takes the form:\n   * `{request, timestamp, metadata}`.\n   *\n   * @returns\n   */ async shiftRequest() {\n        return this._removeRequest(\"shift\");\n    }\n    /**\n   * Returns all the entries that have not expired (per `maxRetentionTime`).\n   * Any expired entries are removed from the queue.\n   *\n   * @returns\n   */ async getAll() {\n        const allEntries = await this._queueStore.getAll();\n        const now = Date.now();\n        const unexpiredEntries = [];\n        for (const entry of allEntries){\n            // Ignore requests older than maxRetentionTime. Call this function\n            // recursively until an unexpired request is found.\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                await this._queueStore.deleteEntry(entry.id);\n            } else {\n                unexpiredEntries.push(convertEntry(entry));\n            }\n        }\n        return unexpiredEntries;\n    }\n    /**\n   * Returns the number of entries present in the queue.\n   * Note that expired entries (per `maxRetentionTime`) are also included in this count.\n   *\n   * @returns\n   */ async size() {\n        return await this._queueStore.size();\n    }\n    /**\n   * Adds the entry to the QueueStore and registers for a sync event.\n   *\n   * @param entry\n   * @param operation\n   * @private\n   */ async _addRequest({ request, metadata, timestamp = Date.now() }, operation) {\n        const storableRequest = await StorableRequest.fromRequest(request.clone());\n        const entry = {\n            requestData: storableRequest.toObject(),\n            timestamp\n        };\n        // Only include metadata if it's present.\n        if (metadata) {\n            entry.metadata = metadata;\n        }\n        switch(operation){\n            case \"push\":\n                await this._queueStore.pushEntry(entry);\n                break;\n            case \"unshift\":\n                await this._queueStore.unshiftEntry(entry);\n                break;\n        }\n        if (process.env.NODE_ENV !== \"production\") {\n            logger.log(`Request for '${getFriendlyURL(request.url)}' has ` + `been added to background sync queue '${this._name}'.`);\n        }\n        // Don't register for a sync if we're in the middle of a sync. Instead,\n        // we wait until the sync is complete and call register if\n        // `this._requestsAddedDuringSync` is true.\n        if (this._syncInProgress) {\n            this._requestsAddedDuringSync = true;\n        } else {\n            await this.registerSync();\n        }\n    }\n    /**\n   * Removes and returns the first or last (depending on `operation`) entry\n   * from the QueueStore that's not older than the `maxRetentionTime`.\n   *\n   * @param operation\n   * @returns\n   * @private\n   */ async _removeRequest(operation) {\n        const now = Date.now();\n        let entry;\n        switch(operation){\n            case \"pop\":\n                entry = await this._queueStore.popEntry();\n                break;\n            case \"shift\":\n                entry = await this._queueStore.shiftEntry();\n                break;\n        }\n        if (entry) {\n            // Ignore requests older than maxRetentionTime. Call this function\n            // recursively until an unexpired request is found.\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                return this._removeRequest(operation);\n            }\n            return convertEntry(entry);\n        }\n        return undefined;\n    }\n    /**\n   * Loops through each request in the queue and attempts to re-fetch it.\n   * If any request fails to re-fetch, it's put back in the same position in\n   * the queue (which registers a retry for the next sync event).\n   */ async replayRequests() {\n        let entry = undefined;\n        while(entry = await this.shiftRequest()){\n            try {\n                await fetch(entry.request.clone());\n                if (process.env.NODE_ENV !== \"production\") {\n                    logger.log(`Request for '${getFriendlyURL(entry.request.url)}' ` + `has been replayed in queue '${this._name}'`);\n                }\n            } catch (error) {\n                await this.unshiftRequest(entry);\n                if (process.env.NODE_ENV !== \"production\") {\n                    logger.log(`Request for '${getFriendlyURL(entry.request.url)}' ` + `failed to replay, putting it back in queue '${this._name}'`);\n                }\n                throw new SerwistError(\"queue-replay-failed\", {\n                    name: this._name\n                });\n            }\n        }\n        if (process.env.NODE_ENV !== \"production\") {\n            logger.log(`All requests in queue '${this.name}' have successfully replayed; the queue is now empty!`);\n        }\n    }\n    /**\n   * Registers a sync event with a tag unique to this instance.\n   */ async registerSync() {\n        // See https://github.com/GoogleChrome/workbox/issues/2393\n        if (\"sync\" in self.registration && !this._forceSyncFallback) {\n            try {\n                await self.registration.sync.register(`${TAG_PREFIX}:${this._name}`);\n            } catch (err) {\n                // This means the registration failed for some reason, possibly due to\n                // the user disabling it.\n                if (process.env.NODE_ENV !== \"production\") {\n                    logger.warn(`Unable to register sync event for '${this._name}'.`, err);\n                }\n            }\n        }\n    }\n    /**\n   * In sync-supporting browsers, this adds a listener for the sync event.\n   * In non-sync-supporting browsers, or if _forceSyncFallback is true, this\n   * will retry the queue on service worker startup.\n   *\n   * @private\n   */ _addSyncListener() {\n        // See https://github.com/GoogleChrome/workbox/issues/2393\n        if (\"sync\" in self.registration && !this._forceSyncFallback) {\n            self.addEventListener(\"sync\", (event)=>{\n                if (event.tag === `${TAG_PREFIX}:${this._name}`) {\n                    if (process.env.NODE_ENV !== \"production\") {\n                        logger.log(`Background sync for tag '${event.tag}' has been received`);\n                    }\n                    const syncComplete = async ()=>{\n                        this._syncInProgress = true;\n                        let syncError = undefined;\n                        try {\n                            await this._onSync({\n                                queue: this\n                            });\n                        } catch (error) {\n                            if (error instanceof Error) {\n                                syncError = error;\n                                // Rethrow the error. Note: the logic in the finally clause\n                                // will run before this gets rethrown.\n                                throw syncError;\n                            }\n                        } finally{\n                            // New items may have been added to the queue during the sync,\n                            // so we need to register for a new sync if that's happened...\n                            // Unless there was an error during the sync, in which\n                            // case the browser will automatically retry later, as long\n                            // as `event.lastChance` is not true.\n                            if (this._requestsAddedDuringSync && !(syncError && !event.lastChance)) {\n                                await this.registerSync();\n                            }\n                            this._syncInProgress = false;\n                            this._requestsAddedDuringSync = false;\n                        }\n                    };\n                    event.waitUntil(syncComplete());\n                }\n            });\n        } else {\n            if (process.env.NODE_ENV !== \"production\") {\n                logger.log(\"Background sync replaying without background sync event\");\n            }\n            // If the browser doesn't support background sync, or the developer has\n            // opted-in to not using it, retry every time the service worker starts up\n            // as a fallback.\n            void this._onSync({\n                queue: this\n            });\n        }\n    }\n    /**\n   * Returns the set of queue names. This is primarily used to reset the list\n   * of queue names in tests.\n   *\n   * @returns\n   * @private\n   */ static get _queueNames() {\n        return queueNames;\n    }\n}\n\n/**\n * A class implementing the `fetchDidFail` lifecycle callback. This makes it\n * easier to add failed requests to a background sync Queue.\n */ class BackgroundSyncPlugin {\n    _queue;\n    /**\n   * @param name See the `@serwist/background-sync.Queue`\n   * documentation for parameter details.\n   * @param options See the `@serwist/background-sync.Queue`\n   * documentation for parameter details.\n   */ constructor(name, options){\n        this._queue = new Queue(name, options);\n    }\n    /**\n   * @param options\n   * @private\n   */ fetchDidFail = async ({ request })=>{\n        await this._queue.pushRequest({\n            request\n        });\n    };\n}\n\nexport { BackgroundSyncPlugin, Queue, QueueStore, StorableRequest };\n","import { assert, logger, getFriendlyURL, SerwistError } from '@serwist/core/internal';\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */ const defaultMethod = \"GET\";\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */ const validMethods = [\n    \"DELETE\",\n    \"GET\",\n    \"HEAD\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\"\n];\n\n/**\n * @param handler Either a function, or an object with a\n * 'handle' method.\n * @returns An object with a handle method.\n *\n * @private\n */ const normalizeHandler = (handler)=>{\n    if (handler && typeof handler === \"object\") {\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.hasMethod(handler, \"handle\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Route\",\n                funcName: \"constructor\",\n                paramName: \"handler\"\n            });\n        }\n        return handler;\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n        assert.isType(handler, \"function\", {\n            moduleName: \"@serwist/routing\",\n            className: \"Route\",\n            funcName: \"constructor\",\n            paramName: \"handler\"\n        });\n    }\n    return {\n        handle: handler\n    };\n};\n\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n */ class Route {\n    handler;\n    match;\n    method;\n    catchHandler;\n    /**\n   * Constructor for Route class.\n   *\n   * @param match A callback function that determines whether the\n   * route matches a given `fetch` event by returning a non-falsy value.\n   * @param handler A callback function that returns a Promise resolving\n   * to a Response.\n   * @param method The HTTP method to match the Route against. Defaults\n   * to GET.\n   */ constructor(match, handler, method = defaultMethod){\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isType(match, \"function\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Route\",\n                funcName: \"constructor\",\n                paramName: \"match\"\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, {\n                    paramName: \"method\"\n                });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n   *\n   * @param handler A callback function that returns a Promise resolving\n   * to a Response.\n   */ setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\n\n/**\n * NavigationRoute makes it easy to create a `@serwist/routing` Route that matches for browser\n * [navigation requests](https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests).\n *\n * It will only match incoming Requests whose [mode](https://fetch.spec.whatwg.org/#concept-request-mode) is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n */ class NavigationRoute extends Route {\n    _allowlist;\n    _denylist;\n    /**\n   * If both `denylist` and `allowlist` are provided, the `denylist` will\n   * take precedence and the request will not match this route.\n   *\n   * The regular expressions in `allowlist` and `denylist`\n   * are matched against the concatenated\n   * [`pathname`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname)\n   * and [`search`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search)\n   * portions of the requested URL.\n   *\n   * *Note*: These RegExps may be evaluated against every destination URL during\n   * a navigation. Avoid using\n   * [complex RegExps](https://github.com/GoogleChrome/workbox/issues/3077),\n   * or else your users may see delays when navigating your site.\n   *\n   * @param handler A callback function that returns a Promise resulting in a Response.\n   * @param options\n   */ constructor(handler, { allowlist = [\n        /./\n    ], denylist = [] } = {}){\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: \"@serwist/routing\",\n                className: \"NavigationRoute\",\n                funcName: \"constructor\",\n                paramName: \"options.allowlist\"\n            });\n            assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: \"@serwist/routing\",\n                className: \"NavigationRoute\",\n                funcName: \"constructor\",\n                paramName: \"options.denylist\"\n            });\n        }\n        super((options)=>this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n   * Routes match handler.\n   *\n   * @param options\n   * @returns\n   * @private\n   */ _match({ url, request }) {\n        if (request && request.mode !== \"navigate\") {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist){\n            if (regExp.test(pathnameAndSearch)) {\n                if (process.env.NODE_ENV !== \"production\") {\n                    logger.log(`The navigation route ${pathnameAndSearch} is not being used, since the URL matches this denylist pattern: ${regExp.toString()}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp)=>regExp.test(pathnameAndSearch))) {\n            if (process.env.NODE_ENV !== \"production\") {\n                logger.debug(`The navigation route ${pathnameAndSearch} is being used.`);\n            }\n            return true;\n        }\n        if (process.env.NODE_ENV !== \"production\") {\n            logger.log(`The navigation route ${pathnameAndSearch} is not being used, since the URL being navigated to doesn't match the allowlist.`);\n        }\n        return false;\n    }\n}\n\n/**\n * RegExpRoute makes it easy to create a regular expression based on a `@serwist/routing` Route.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n */ class RegExpRoute extends Route {\n    /**\n   * If the regular expression contains\n   * [capture groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references),\n   * the captured values will be passed to the `params` argument.\n   *\n   * @param regExp The regular expression to match against URLs.\n   * @param handler A callback function that returns a Promise resulting in a Response.\n   * @param method The HTTP method to match the Route, defaults to GET.\n   * against.\n   */ constructor(regExp, handler, method){\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: \"@serwist/routing\",\n                className: \"RegExpRoute\",\n                funcName: \"constructor\",\n                paramName: \"pattern\"\n            });\n        }\n        const match = ({ url })=>{\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== \"production\") {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched against the cross-origin URL '${url.toString()}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\n\n/**\n * The Router can be used to process a `FetchEvent` using one or more `@serwist/routing` Route(s),\n * responding with a `Response` if a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\" handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\" handler if one is defined to\n * gracefully deal with issues and respond with a Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n */ class Router {\n    _routes;\n    _defaultHandlerMap;\n    _catchHandler;\n    /**\n   * Initializes a new Router.\n   */ constructor(){\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n   * @returns routes A `Map` of HTTP method name ('GET', etc.) to an array of all the corresponding `Route`\n   * instances that are registered.\n   */ get routes() {\n        return this._routes;\n    }\n    /**\n   * Adds a fetch event listener to respond to events when a route matches\n   * the event's request.\n   */ addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener(\"fetch\", (event)=>{\n            const { request } = event;\n            const responsePromise = this.handleRequest({\n                request,\n                event\n            });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        });\n    }\n    /**\n   * Adds a message event listener for URLs to cache from the window.\n   * This is useful to cache resources loaded on the page prior to when the\n   * service worker started controlling it.\n   *\n   * The format of the message data sent from the window should be as follows.\n   * Where the `urlsToCache` array may consist of URL strings or an array of\n   * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n   *\n   * ```\n   * {\n   *   type: 'CACHE_URLS',\n   *   payload: {\n   *     urlsToCache: [\n   *       './script1.js',\n   *       './script2.js',\n   *       ['./script3.js', {mode: 'no-cors'}],\n   *     ],\n   *   },\n   * }\n   * ```\n   */ addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener(\"message\", (event)=>{\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === \"CACHE_URLS\") {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== \"production\") {\n                    logger.debug(\"Caching URLs from the window\", payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry)=>{\n                    if (typeof entry === \"string\") {\n                        entry = [\n                            entry\n                        ];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({\n                        request,\n                        event\n                    });\n                // TODO(philipwalton): TypeScript errors without this typecast for\n                // some reason (probably a bug). The real type here should work but\n                // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports?.[0]) {\n                    void requestPromises.then(()=>event.ports[0].postMessage(true));\n                }\n            }\n        });\n    }\n    /**\n   * Apply the routing rules to a FetchEvent object to get a Response from an\n   * appropriate Route's handler.\n   *\n   * @param options\n   * @returns A promise is returned if a registered route can handle the request.\n   * If there is no matching route and there's no `defaultHandler`, `undefined`\n   * is returned.\n   */ handleRequest({ request, event }) {\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isInstance(request, Request, {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"handleRequest\",\n                paramName: \"options.request\"\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith(\"http\")) {\n            if (process.env.NODE_ENV !== \"production\") {\n                logger.debug(`Serwist Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url\n        });\n        let handler = route?.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== \"production\") {\n            if (handler) {\n                debugMessages.push([\n                    \"Found a route to handle this request:\",\n                    route\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== \"production\") {\n                debugMessages.push(`Failed to find a matching route. Falling back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== \"production\") {\n                // No handler so Serwist will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== \"production\") {\n            // We have a handler, meaning Serwist is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            for (const msg of debugMessages){\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                } else {\n                    logger.log(msg);\n                }\n            }\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({\n                url,\n                request,\n                event,\n                params\n            });\n        } catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route?.catchHandler;\n        if (responsePromise instanceof Promise && (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err)=>{\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== \"production\") {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to:  ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(\"Error thrown by:\", route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({\n                            url,\n                            request,\n                            event,\n                            params\n                        });\n                    } catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== \"production\") {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to:  ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(\"Error thrown by:\", route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({\n                        url,\n                        request,\n                        event\n                    });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n   * Checks a request and URL (and optionally an event) against the list of\n   * registered routes, and if there's a match, returns the corresponding\n   * route along with any params generated by the match.\n   *\n   * @param options\n   * @returns An object with `route` and `params` properties. They are populated\n   * if a matching route was found or `undefined` otherwise.\n   */ findMatchingRoute({ url, sameOrigin, request, event }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes){\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({\n                url,\n                sameOrigin,\n                request,\n                event\n            });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== \"production\") {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                } else if (matchResult.constructor === Object && // eslint-disable-line\n                Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                } else if (typeof matchResult === \"boolean\") {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return {\n                    route,\n                    params\n                };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n   * Define a default `handler` that's called when no routes explicitly\n   * match the incoming request.\n   *\n   * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n   *\n   * Without a default handler, unmatched requests will go against the\n   * network as if there were no service worker present.\n   *\n   * @param handler A callback function that returns a Promise resulting in a Response.\n   * @param method The HTTP method to associate with this default handler. Each method\n   * has its own default. Defaults to GET.\n   */ setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n   * If a Route throws an error while handling a request, this `handler`\n   * will be called and given a chance to provide a response.\n   *\n   * @param handler A callback function that returns a Promise resulting\n   * in a Response.\n   */ setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n   * Registers a route with the router.\n   *\n   * @param route The route to register.\n   */ registerRoute(route) {\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isType(route, \"object\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"registerRoute\",\n                paramName: \"route\"\n            });\n            assert.hasMethod(route, \"match\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"registerRoute\",\n                paramName: \"route\"\n            });\n            assert.isType(route.handler, \"object\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"registerRoute\",\n                paramName: \"route\"\n            });\n            assert.hasMethod(route.handler, \"handle\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"registerRoute\",\n                paramName: \"route.handler\"\n            });\n            assert.isType(route.method, \"string\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"registerRoute\",\n                paramName: \"route.method\"\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n   * Unregisters a route with the router.\n   *\n   * @param route The route to unregister.\n   */ unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new SerwistError(\"unregister-route-but-not-found-with-method\", {\n                method: route.method\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        } else {\n            throw new SerwistError(\"unregister-route-route-not-registered\");\n        }\n    }\n}\n\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @returns\n */ const getOrCreateDefaultRouter = ()=>{\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * @param capture If the capture param is a `Route`, all other arguments will be ignored.\n * @param handler A callback function that returns a Promise resulting in a Response.\n * This parameter is required if `capture` is not a `Route` object.\n * @param method The HTTP method to match the Route against. Defaults to GET.\n * @returns The generated `Route`.\n */ function registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === \"string\") {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== \"production\") {\n            if (!(capture.startsWith(\"/\") || capture.startsWith(\"http\"))) {\n                throw new SerwistError(\"invalid-string\", {\n                    moduleName: \"@serwist/routing\",\n                    funcName: \"registerRoute\",\n                    paramName: \"capture\"\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith(\"http\") ? captureUrl.pathname : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = \"[*:?+]\";\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard character (${wildcards}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url })=>{\n            if (process.env.NODE_ENV !== \"production\") {\n                if (url.pathname === captureUrl.pathname && url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ${url.toString()}. This route will only handle cross-origin requests if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    } else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    } else if (typeof capture === \"function\") {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    } else if (capture instanceof Route) {\n        route = capture;\n    } else {\n        throw new SerwistError(\"unsupported-route-type\", {\n            moduleName: \"@serwist/routing\",\n            funcName: \"registerRoute\",\n            paramName: \"capture\"\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\n\n/**\n * If a Route throws an error while handling a request, this `handler`\n * will be called and given a chance to provide a response.\n *\n * @param handler A callback function that returns a Promise resulting in a Response.\n */ function setCatchHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setCatchHandler(handler);\n}\n\n/**\n * Define a default `handler` that's called when no routes explicitly\n * match the incoming request.\n *\n * Without a default handler, unmatched requests will go against the\n * network as if there were no service worker present.\n *\n * @param handler A callback function that returns a Promise resulting in a Response.\n */ function setDefaultHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setDefaultHandler(handler);\n}\n\nexport { NavigationRoute, RegExpRoute, Route, Router, registerRoute, setCatchHandler, setDefaultHandler };\n","import { assert, Deferred, logger, getFriendlyURL, SerwistError, timeout, cacheMatchIgnoreParams, executeQuotaErrorCallbacks, privateCacheNames } from '@serwist/core/internal';\n\nfunction toRequest(input) {\n    return typeof input === \"string\" ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls `Strategy.handle` or\n * `Strategy.handleAll` that wraps all fetch and cache actions around plugin callbacks\n * and keeps track of when the strategy is \"done\" (i.e. all added `event.waitUntil()` promises\n * have resolved).\n */ class StrategyHandler {\n    /**\n   * The request the strategy is performing (passed to the strategy's\n   * `handle()` or `handleAll()` method).\n   */ request;\n    /**\n   * A `URL` instance of `request.url` (if passed to the strategy's\n   * `handle()` or `handleAll()` method).\n   * Note: the `url` param will be present if the strategy was invoked\n   * from a `@serwist/routing.Route` object.\n   */ url;\n    /**\n   * The event associated with this request.\n   */ event;\n    /**\n   * A `param` value (if passed to the strategy's\n   * `handle()` or `handleAll()` method).\n   * Note: the `param` param will be present if the strategy was invoked\n   * from a `@serwist/routing.Route` object and the `@serwist/strategies.matchCallback`\n   * returned a truthy value (it will be that value).\n   */ params;\n    _cacheKeys = {};\n    _strategy;\n    _extendLifetimePromises;\n    _handlerDeferred;\n    _plugins;\n    _pluginStateMap;\n    /**\n   * Creates a new instance associated with the passed strategy and event\n   * that's handling the request.\n   *\n   * The constructor also initializes the state that will be passed to each of\n   * the plugins handling this request.\n   *\n   * @param strategy\n   * @param options\n   */ constructor(strategy, options){\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: \"@serwist/strategies\",\n                className: \"StrategyHandler\",\n                funcName: \"constructor\",\n                paramName: \"options.event\"\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [\n            ...strategy.plugins\n        ];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins){\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n   * Fetches a given request (and invokes any applicable plugin callback\n   * methods) using the `fetchOptions` (for non-navigation requests) and\n   * `plugins` defined on the `Strategy` object.\n   *\n   * The following plugin lifecycle methods are invoked when using this method:\n   * - `requestWillFetch()`\n   * - `fetchDidSucceed()`\n   * - `fetchDidFail()`\n   *\n   * @param input The URL or request to fetch.\n   * @returns\n   */ async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === \"navigate\" && event instanceof FetchEvent && event.preloadResponse) {\n            const possiblePreloadResponse = await event.preloadResponse;\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== \"production\") {\n                    logger.log(`Using a preloaded navigation response for '${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback(\"fetchDidFail\") ? request.clone() : null;\n        try {\n            for (const cb of this.iterateCallbacks(\"requestWillFetch\")){\n                request = await cb({\n                    request: request.clone(),\n                    event\n                });\n            }\n        } catch (err) {\n            if (err instanceof Error) {\n                throw new SerwistError(\"plugin-error-request-will-fetch\", {\n                    thrownErrorMessage: err.message\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === \"navigate\" ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== \"production\") {\n                logger.debug(`Network request for '${getFriendlyURL(request.url)}' returned a response with status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks(\"fetchDidSucceed\")){\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse\n                });\n            }\n            return fetchResponse;\n        } catch (error) {\n            if (process.env.NODE_ENV !== \"production\") {\n                logger.log(`Network request for '${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks(\"fetchDidFail\", {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone()\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n   * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n   * the response generated by `this.fetch()`.\n   *\n   * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n   * so you do not have to manually call `waitUntil()` on the event.\n   *\n   * @param input The request or URL to fetch and cache.\n   * @returns\n   */ async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n   * Matches a request from the cache (and invokes any applicable plugin\n   * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n   * defined on the strategy object.\n   *\n   * The following plugin lifecycle methods are invoked when using this method:\n   * - cacheKeyWillByUsed()\n   * - cachedResponseWillByUsed()\n   *\n   * @param key The Request or URL to use as the cache key.\n   * @returns A matching response, if found.\n   */ async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, \"read\");\n        const multiMatchOptions = {\n            ...matchOptions,\n            ...{\n                cacheName\n            }\n        };\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== \"production\") {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            } else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks(\"cachedResponseWillBeUsed\")){\n            cachedResponse = await callback({\n                cacheName,\n                matchOptions,\n                cachedResponse,\n                request: effectiveRequest,\n                event: this.event\n            }) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n   * Puts a request/response pair in the cache (and invokes any applicable\n   * plugin callback methods) using the `cacheName` and `plugins` defined on\n   * the strategy object.\n   *\n   * The following plugin lifecycle methods are invoked when using this method:\n   * - cacheKeyWillByUsed()\n   * - cacheWillUpdate()\n   * - cacheDidUpdate()\n   *\n   * @param key The request or URL to use as the cache key.\n   * @param response The response to cache.\n   * @returns `false` if a cacheWillUpdate caused the response\n   * not be cached, and `true` otherwise.\n   */ async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, \"write\");\n        if (process.env.NODE_ENV !== \"production\") {\n            if (effectiveRequest.method && effectiveRequest.method !== \"GET\") {\n                throw new SerwistError(\"attempt-to-cache-non-get-request\", {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get(\"Vary\");\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} has a 'Vary: ${vary}' header. Consider setting the {ignoreVary: true} option on your strategy to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== \"production\") {\n                logger.error(`Cannot cache non-existent response for '${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new SerwistError(\"cache-put-with-no-response\", {\n                url: getFriendlyURL(effectiveRequest.url)\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== \"production\") {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback(\"cacheDidUpdate\");\n        const oldResponse = hasCacheUpdateCallback ? await cacheMatchIgnoreParams(// TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n        // feature. Consider into ways to only add this behavior if using\n        // precaching.\n        cache, effectiveRequest.clone(), [\n            \"__WB_REVISION__\"\n        ], matchOptions) : null;\n        if (process.env.NODE_ENV !== \"production\") {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` + `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        } catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === \"QuotaExceededError\") {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks(\"cacheDidUpdate\")){\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event\n            });\n        }\n        return true;\n    }\n    /**\n   * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n   * executes any of those callbacks found in sequence. The final `Request`\n   * object returned by the last plugin is treated as the cache key for cache\n   * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n   * been registered, the passed request is returned unmodified\n   *\n   * @param request\n   * @param mode\n   * @returns\n   */ async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks(\"cacheKeyWillBeUsed\")){\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n   * Returns true if the strategy has at least one plugin with the given\n   * callback.\n   *\n   * @param name The name of the callback to check for.\n   * @returns\n   */ hasCallback(name) {\n        for (const plugin of this._strategy.plugins){\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n   * Runs all plugin callbacks matching the given name, in order, passing the\n   * given param object (merged ith the current plugin state) as the only\n   * argument.\n   *\n   * Note: since this method runs all plugins, it's not suitable for cases\n   * where the return value of a callback needs to be applied prior to calling\n   * the next callback. See `@serwist/strategies.iterateCallbacks` for how to handle that case.\n   *\n   * @param name The name of the callback to run within each plugin.\n   * @param param The object to pass as the first (and only) param when executing each callback. This object will be merged with the\n   * current plugin state prior to callback execution.\n   */ async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)){\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as SerwistPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n   * Accepts a callback and returns an iterable of matching plugin callbacks,\n   * where each callback is wrapped with the current handler state (i.e. when\n   * you call each callback, whatever object parameter you pass it will\n   * be merged with the plugin's current state).\n   *\n   * @param name The name fo the callback to run\n   * @returns\n   */ *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins){\n            if (typeof plugin[name] === \"function\") {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param)=>{\n                    const statefulParam = {\n                        ...param,\n                        state\n                    };\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n   * Adds a promise to the\n   * [extend lifetime promises](https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises)\n   * of the event event associated with the request being handled (usually a `FetchEvent`).\n   *\n   * Note: you can await\n   * `@serwist/strategies.StrategyHandler.doneWaiting`\n   * to know when all added promises have settled.\n   *\n   * @param promise A promise to add to the extend lifetime promises of\n   * the event that triggered the request.\n   */ waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n   * Returns a promise that resolves once all promises passed to\n   * `@serwist/strategies.StrategyHandler.waitUntil` have settled.\n   *\n   * Note: any work done after `doneWaiting()` settles should be manually\n   * passed to an event's `waitUntil()` method (not this handler's\n   * `waitUntil()` method), otherwise the service worker thread my be killed\n   * prior to your work completing.\n   */ async doneWaiting() {\n        let promise = undefined;\n        while(promise = this._extendLifetimePromises.shift()){\n            await promise;\n        }\n    }\n    /**\n   * Stops running the strategy and immediately resolves any pending\n   * `waitUntil()` promises.\n   */ destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n   * This method will call `cacheWillUpdate` on the available plugins (or use\n   * status === 200) to determine if the response is safe and valid to cache.\n   *\n   * @param response\n   * @returns\n   * @private\n   */ async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks(\"cacheWillUpdate\")){\n            responseToCache = await callback({\n                request: this.request,\n                response: responseToCache,\n                event: this.event\n            }) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== \"production\") {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`);\n                        } else {\n                            logger.debug(`The response for '${this.request.url}' returned a status code of '${response.status}' and won't be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\n\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage `@serwist/strategies`'s `StrategyHandler` arg to perform all\n * fetching and cache logic, which will ensure all relevant cache, cache options,\n * fetch options and plugins are used (per the current strategy instance).\n */ class Strategy {\n    cacheName;\n    plugins;\n    fetchOptions;\n    matchOptions;\n    /**\n   * Creates a new instance of the strategy and sets all documented option\n   * properties as public instance properties.\n   *\n   * Note: if a custom strategy class extends the base Strategy class and does\n   * not need more than these properties, it does not need to define its own\n   * constructor.\n   *\n   * @param options\n   */ constructor(options = {}){\n        this.cacheName = privateCacheNames.getRuntimeName(options.cacheName);\n        this.plugins = options.plugins || [];\n        this.fetchOptions = options.fetchOptions;\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n   * Perform a request strategy and returns a `Promise` that will resolve with\n   * a `Response`, invoking all relevant plugin callbacks.\n   *\n   * When a strategy instance is registered with a `@serwist/routing` Route, this method is automatically\n   * called when the route matches.\n   *\n   * Alternatively, this method can be used in a standalone `FetchEvent`\n   * listener by passing it to `event.respondWith()`.\n   *\n   * @param options A `FetchEvent` or an object with the properties listed below.\n   * @param options.request A request to run this strategy for.\n   * @param options.event The event associated with the request.\n   * @param options.url\n   * @param options.params\n   */ handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n   * Similar to `@serwist/strategies`'s `Strategy.handle`, but\n   * instead of just returning a `Promise` that resolves to a `Response` it\n   * it will return an tuple of `[response, done]` promises, where the former\n   * (`response`) is equivalent to what `handle()` returns, and the latter is a\n   * Promise that will resolve once any promises that were added to\n   * `event.waitUntil()` as part of performing the strategy have completed.\n   *\n   * You can await the `done` promise to ensure any extra work performed by\n   * the strategy (usually caching responses) completes successfully.\n   *\n   * @param options A `FetchEvent` or `HandlerCallbackOptions` object.\n   * @returns A tuple of [response, done] promises that can be used to determine when the response resolves as\n   * well as when the handler has completed all its work.\n   */ handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === \"string\" ? new Request(options.request) : options.request;\n        const params = \"params\" in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, {\n            event,\n            request,\n            params\n        });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [\n            responseDone,\n            handlerDone\n        ];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks(\"handlerWillStart\", {\n            event,\n            request\n        });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (response === undefined || response.type === \"error\") {\n                throw new SerwistError(\"no-response\", {\n                    url: request.url\n                });\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks(\"handlerDidError\")){\n                    response = await callback({\n                        error,\n                        event,\n                        request\n                    });\n                    if (response !== undefined) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            if (process.env.NODE_ENV !== \"production\") {\n                throw logger.log(`While responding to '${getFriendlyURL(request.url)}', an ${error instanceof Error ? error.toString() : \"\"} error occurred. Using a fallback response provided by a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks(\"handlerWillRespond\")){\n            response = await callback({\n                event,\n                request,\n                response\n            });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response = undefined;\n        let error = undefined;\n        try {\n            response = await responseDone;\n        } catch (error) {\n        // Ignore errors, as response errors should be caught via the `response`\n        // promise above. The `done` promise will only throw for errors in\n        // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks(\"handlerDidRespond\", {\n                event,\n                request,\n                response\n            });\n            await handler.doneWaiting();\n        } catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks(\"handlerDidComplete\", {\n            event,\n            request,\n            response,\n            error\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\n\nconst messages = {\n    strategyStart: (strategyName, request)=>`Using ${strategyName} to respond to '${getFriendlyURL(request.url)}'`,\n    printFinalResponse: (response)=>{\n        if (response) {\n            logger.groupCollapsed(\"View the final response here.\");\n            logger.log(response || \"[No response returned]\");\n            logger.groupEnd();\n        }\n    }\n};\n\n/**\n * An implementation of a [cache first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `SerwistError` exception.\n */ class CacheFirst extends Strategy {\n    /**\n   * @private\n   * @param request A request to run this strategy for.\n   * @param handler The event that triggered the request.\n   * @returns\n   */ async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isInstance(request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"makeRequest\",\n                paramName: \"request\"\n            });\n        }\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) {\n            if (process.env.NODE_ENV !== \"production\") {\n                logs.push(`No response found in the '${this.cacheName}' cache. Will respond with a network request.`);\n            }\n            try {\n                response = await handler.fetchAndCachePut(request);\n            } catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n            if (process.env.NODE_ENV !== \"production\") {\n                if (response) {\n                    logs.push(\"Got response from network.\");\n                } else {\n                    logs.push(\"Unable to get a response from the network.\");\n                }\n            }\n        } else {\n            if (process.env.NODE_ENV !== \"production\") {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== \"production\") {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs){\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new SerwistError(\"no-response\", {\n                url: request.url,\n                error\n            });\n        }\n        return response;\n    }\n}\n\n/**\n * An implementation of a [cache only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any Serwist plugin.\n *\n * If there is no cache match, this will throw a `SerwistError` exception.\n */ class CacheOnly extends Strategy {\n    /**\n   * @private\n   * @param request A request to run this strategy for.\n   * @param handler The event that triggered the request.\n   * @returns\n   */ async _handle(request, handler) {\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isInstance(request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"makeRequest\",\n                paramName: \"request\"\n            });\n        }\n        const response = await handler.cacheMatch(request);\n        if (process.env.NODE_ENV !== \"production\") {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Found a cached response in the '${this.cacheName}' cache.`);\n                messages.printFinalResponse(response);\n            } else {\n                logger.log(`No response found in the '${this.cacheName}' cache.`);\n            }\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new SerwistError(\"no-response\", {\n                url: request.url\n            });\n        }\n        return response;\n    }\n}\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ const cacheOkAndOpaquePlugin = {\n    /**\n   * Returns a valid response (to allow caching) if the status is 200 (OK) or\n   * 0 (opaque).\n   *\n   * @param options\n   * @returns\n   * @private\n   */ cacheWillUpdate: async ({ response })=>{\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    }\n};\n\n/**\n * An implementation of a [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `SerwistError` exception.\n */ class NetworkFirst extends Strategy {\n    _networkTimeoutSeconds;\n    /**\n   * @param options\n   * This option can be used to combat\n   * \"[lie-fi](https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi)\"\n   * scenarios.\n   */ constructor(options = {}){\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p)=>\"cacheWillUpdate\" in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== \"production\") {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, \"number\", {\n                    moduleName: \"@serwist/strategies\",\n                    className: this.constructor.name,\n                    funcName: \"constructor\",\n                    paramName: \"networkTimeoutSeconds\"\n                });\n            }\n        }\n    }\n    /**\n   * @private\n   * @param request A request to run this strategy for.\n   * @param handler The event that triggered the request.\n   * @returns\n   */ async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isInstance(request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"handle\",\n                paramName: \"makeRequest\"\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({\n                request,\n                logs,\n                handler\n            });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({\n            timeoutId,\n            request,\n            logs,\n            handler\n        });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async ()=>{\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return await handler.waitUntil(Promise.race(promises)) || // If Promise.race() resolved with null, it might be due to a network\n            // timeout + a cache miss. If that were to happen, we'd rather wait until\n            // the networkPromise resolves instead of returning null.\n            // Note that it's fine to await an already-resolved promise, so we don't\n            // have to check to see if it's still \"in flight\".\n            await networkPromise;\n        })());\n        if (process.env.NODE_ENV !== \"production\") {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs){\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new SerwistError(\"no-response\", {\n                url: request.url\n            });\n        }\n        return response;\n    }\n    /**\n   * @param options\n   * @returns\n   * @private\n   */ _getTimeoutPromise({ request, logs, handler }) {\n        // biome-ignore lint/suspicious/noImplicitAnyLet: setTimeout is typed with Node.js's typings, so we can't use number | undefined here.\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve)=>{\n            const onNetworkTimeout = async ()=>{\n                if (process.env.NODE_ENV !== \"production\") {\n                    logs.push(`Timing out the network response at ${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId\n        };\n    }\n    /**\n   * @param options\n   * @param options.timeoutId\n   * @param options.request\n   * @param options.logs A reference to the logs Array.\n   * @param options.event\n   * @returns\n   *\n   * @private\n   */ async _getNetworkPromise({ timeoutId, request, logs, handler }) {\n        let error = undefined;\n        let response = undefined;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        } catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== \"production\") {\n            if (response) {\n                logs.push(\"Got response from network.\");\n            } else {\n                logs.push(\"Unable to get a response from the network. Will respond \" + \"with a cached response.\");\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== \"production\") {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n                } else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\n\n/**\n * An implementation of a [network only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any Serwist plugin.\n *\n * If the network request fails, this will throw a `SerwistError` exception.\n */ class NetworkOnly extends Strategy {\n    _networkTimeoutSeconds;\n    /**\n   * @param options\n   */ constructor(options = {}){\n        super(options);\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    }\n    /**\n   * @private\n   * @param request A request to run this strategy for.\n   * @param handler The event that triggered the request.\n   * @returns\n   */ async _handle(request, handler) {\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isInstance(request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"_handle\",\n                paramName: \"request\"\n            });\n        }\n        let error = undefined;\n        let response;\n        try {\n            const promises = [\n                handler.fetch(request)\n            ];\n            if (this._networkTimeoutSeconds) {\n                const timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);\n                promises.push(timeoutPromise);\n            }\n            response = await Promise.race(promises);\n            if (!response) {\n                throw new Error(`Timed out the network response after ${this._networkTimeoutSeconds} seconds.`);\n            }\n        } catch (err) {\n            if (err instanceof Error) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== \"production\") {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(\"Got response from network.\");\n            } else {\n                logger.log(\"Unable to get a response from the network.\");\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new SerwistError(\"no-response\", {\n                url: request.url,\n                error\n            });\n        }\n        return response;\n    }\n}\n\n/**\n * An implementation of a\n * [stale-while-revalidate](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate)\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `SerwistError` exception.\n */ class StaleWhileRevalidate extends Strategy {\n    /**\n   * @param options\n   */ constructor(options = {}){\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p)=>\"cacheWillUpdate\" in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n    }\n    /**\n   * @private\n   * @param request A request to run this strategy for.\n   * @param handler The event that triggered the request.\n   * @returns\n   */ async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isInstance(request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"handle\",\n                paramName: \"request\"\n            });\n        }\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(()=>{\n        // Swallow this error because a 'no-response' error will be thrown in\n        // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        void handler.waitUntil(fetchAndCachePromise);\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (response) {\n            if (process.env.NODE_ENV !== \"production\") {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache. Will update with the network response in the background.`);\n            }\n        } else {\n            if (process.env.NODE_ENV !== \"production\") {\n                logs.push(`No response found in the '${this.cacheName}' cache. Will wait for the network response.`);\n            }\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = await fetchAndCachePromise;\n            } catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n        }\n        if (process.env.NODE_ENV !== \"production\") {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs){\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new SerwistError(\"no-response\", {\n                url: request.url,\n                error\n            });\n        }\n        return response;\n    }\n}\n\nexport { CacheFirst, CacheOnly, NetworkFirst, NetworkOnly, StaleWhileRevalidate, Strategy, StrategyHandler };\n","import { BackgroundSyncPlugin } from '@serwist/background-sync';\nimport { privateCacheNames, getFriendlyURL, logger } from '@serwist/core/internal';\nimport { Router, Route } from '@serwist/routing';\nimport { NetworkOnly, NetworkFirst } from '@serwist/strategies';\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ const QUEUE_NAME = \"serwist-google-analytics\";\nconst MAX_RETENTION_TIME = 60 * 48; // Two days in minutes\nconst GOOGLE_ANALYTICS_HOST = \"www.google-analytics.com\";\nconst GTM_HOST = \"www.googletagmanager.com\";\nconst ANALYTICS_JS_PATH = \"/analytics.js\";\nconst GTAG_JS_PATH = \"/gtag/js\";\nconst GTM_JS_PATH = \"/gtm.js\";\n// This RegExp matches all known Measurement Protocol single-hit collect\n// endpoints. Most of the time the default path (/collect) is used, but\n// occasionally an experimental endpoint is used when testing new features,\n// (e.g. /r/collect or /j/collect)\nconst COLLECT_PATHS_REGEX = /^\\/(\\w+\\/)?collect/;\n\n/**\n * Creates the requestWillDequeue callback to be used with the background\n * sync plugin. The callback takes the failed request and adds the\n * `qt` param based on the current time, as well as applies any other\n * user-defined hit modifications.\n *\n * @param config\n * @returns The requestWillDequeue callback function.\n * @private\n */ const createOnSyncCallback = (config)=>{\n    return async ({ queue })=>{\n        let entry = undefined;\n        while(entry = await queue.shiftRequest()){\n            const { request, timestamp } = entry;\n            const url = new URL(request.url);\n            try {\n                // Measurement protocol requests can set their payload parameters in\n                // either the URL query string (for GET requests) or the POST body.\n                const params = request.method === \"POST\" ? new URLSearchParams(await request.clone().text()) : url.searchParams;\n                // Calculate the qt param, accounting for the fact that an existing\n                // qt param may be present and should be updated rather than replaced.\n                const originalHitTime = timestamp - (Number(params.get(\"qt\")) || 0);\n                const queueTime = Date.now() - originalHitTime;\n                // Set the qt param prior to applying hitFilter or parameterOverrides.\n                params.set(\"qt\", String(queueTime));\n                // Apply `parameterOverrides`, if set.\n                if (config.parameterOverrides) {\n                    for (const param of Object.keys(config.parameterOverrides)){\n                        const value = config.parameterOverrides[param];\n                        params.set(param, value);\n                    }\n                }\n                // Apply `hitFilter`, if set.\n                if (typeof config.hitFilter === \"function\") {\n                    config.hitFilter.call(null, params);\n                }\n                // Retry the fetch. Ignore URL search params from the URL as they're\n                // now in the post body.\n                await fetch(new Request(url.origin + url.pathname, {\n                    body: params.toString(),\n                    method: \"POST\",\n                    mode: \"cors\",\n                    credentials: \"omit\",\n                    headers: {\n                        \"Content-Type\": \"text/plain\"\n                    }\n                }));\n                if (process.env.NODE_ENV !== \"production\") {\n                    logger.log(`Request for '${getFriendlyURL(url.href)}' has been replayed`);\n                }\n            } catch (err) {\n                await queue.unshiftRequest(entry);\n                if (process.env.NODE_ENV !== \"production\") {\n                    logger.log(`Request for '${getFriendlyURL(url.href)}' failed to replay, putting it back in the queue.`);\n                }\n                throw err;\n            }\n        }\n        if (process.env.NODE_ENV !== \"production\") {\n            logger.log(\"All Google Analytics request successfully replayed; \" + \"the queue is now empty!\");\n        }\n    };\n};\n/**\n * Creates GET and POST routes to catch failed Measurement Protocol hits.\n *\n * @param bgSyncPlugin\n * @returns The created routes.\n * @private\n */ const createCollectRoutes = (bgSyncPlugin)=>{\n    const match = ({ url })=>url.hostname === GOOGLE_ANALYTICS_HOST && COLLECT_PATHS_REGEX.test(url.pathname);\n    const handler = new NetworkOnly({\n        plugins: [\n            bgSyncPlugin\n        ]\n    });\n    return [\n        new Route(match, handler, \"GET\"),\n        new Route(match, handler, \"POST\")\n    ];\n};\n/**\n * Creates a route with a network first strategy for the analytics.js script.\n *\n * @param cacheName\n * @returns The created route.\n * @private\n */ const createAnalyticsJsRoute = (cacheName)=>{\n    const match = ({ url })=>url.hostname === GOOGLE_ANALYTICS_HOST && url.pathname === ANALYTICS_JS_PATH;\n    const handler = new NetworkFirst({\n        cacheName\n    });\n    return new Route(match, handler, \"GET\");\n};\n/**\n * Creates a route with a network first strategy for the gtag.js script.\n *\n * @param cacheName\n * @returns The created route.\n * @private\n */ const createGtagJsRoute = (cacheName)=>{\n    const match = ({ url })=>url.hostname === GTM_HOST && url.pathname === GTAG_JS_PATH;\n    const handler = new NetworkFirst({\n        cacheName\n    });\n    return new Route(match, handler, \"GET\");\n};\n/**\n * Creates a route with a network first strategy for the gtm.js script.\n *\n * @param cacheName\n * @returns The created route.\n * @private\n */ const createGtmJsRoute = (cacheName)=>{\n    const match = ({ url })=>url.hostname === GTM_HOST && url.pathname === GTM_JS_PATH;\n    const handler = new NetworkFirst({\n        cacheName\n    });\n    return new Route(match, handler, \"GET\");\n};\n/**\n * @param options\n */ const initialize = (options = {})=>{\n    const cacheName = privateCacheNames.getGoogleAnalyticsName(options.cacheName);\n    const bgSyncPlugin = new BackgroundSyncPlugin(QUEUE_NAME, {\n        maxRetentionTime: MAX_RETENTION_TIME,\n        onSync: createOnSyncCallback(options)\n    });\n    const routes = [\n        createGtmJsRoute(cacheName),\n        createAnalyticsJsRoute(cacheName),\n        createGtagJsRoute(cacheName),\n        ...createCollectRoutes(bgSyncPlugin)\n    ];\n    const router = new Router();\n    for (const route of routes){\n        router.registerRoute(route);\n    }\n    router.addFetchListener();\n};\n\nexport { initialize };\n","import { logger } from '@serwist/core/internal';\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ // Give TypeScript the correct global.\n/**\n * @returns Whether or not the current browser supports enabling\n * navigation preload.\n */ function isSupported() {\n    return Boolean(self.registration?.navigationPreload);\n}\n\n/**\n * If the browser supports Navigation Preload, then this will disable it.\n */ function disable() {\n    if (isSupported()) {\n        self.addEventListener(\"activate\", (event)=>{\n            event.waitUntil(self.registration.navigationPreload.disable().then(()=>{\n                if (process.env.NODE_ENV !== \"production\") {\n                    logger.log(\"Navigation preload is disabled.\");\n                }\n            }));\n        });\n    } else {\n        if (process.env.NODE_ENV !== \"production\") {\n            logger.log(\"Navigation preload is not supported in this browser.\");\n        }\n    }\n}\n\n/**\n * If the browser supports Navigation Preload, then this will enable it.\n *\n * @param headerValue Optionally, allows developers to\n * [override](https://developers.google.com/web/updates/2017/02/navigation-preload#changing_the_header)\n * the value of the `Service-Worker-Navigation-Preload` header which will be\n * sent to the server when making the navigation request.\n */ function enable(headerValue) {\n    if (isSupported()) {\n        self.addEventListener(\"activate\", (event)=>{\n            event.waitUntil(self.registration.navigationPreload.enable().then(()=>{\n                // Defaults to Service-Worker-Navigation-Preload: true if not set.\n                if (headerValue) {\n                    void self.registration.navigationPreload.setHeaderValue(headerValue);\n                }\n                if (process.env.NODE_ENV !== \"production\") {\n                    logger.log(\"Navigation preload is enabled.\");\n                }\n            }));\n        });\n    } else {\n        if (process.env.NODE_ENV !== \"production\") {\n            logger.log(\"Navigation preload is not supported in this browser.\");\n        }\n    }\n}\n\nexport { disable, enable, isSupported };\n","import { privateCacheNames, logger, getFriendlyURL, SerwistError, assert, waitUntil } from '@serwist/core/internal';\nimport { copyResponse } from '@serwist/core';\nimport { Strategy } from '@serwist/strategies';\nimport { Route, registerRoute } from '@serwist/routing';\n\n/**\n * A `@serwist/strategies.Strategy` implementation\n * specifically designed to work with\n * `@serwist/precaching.PrecacheController`\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n */ class PrecacheStrategy extends Strategy {\n    _fallbackToNetwork;\n    static defaultPrecacheCacheabilityPlugin = {\n        async cacheWillUpdate ({ response }) {\n            if (!response || response.status >= 400) {\n                return null;\n            }\n            return response;\n        }\n    };\n    static copyRedirectedCacheableResponsesPlugin = {\n        async cacheWillUpdate ({ response }) {\n            return response.redirected ? await copyResponse(response) : response;\n        }\n    };\n    /**\n   * @param options\n   */ constructor(options = {}){\n        options.cacheName = privateCacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork = options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n   * @private\n   * @param request A request to run this strategy for.\n   * @param handler The event that triggered the request.\n   * @returns\n   */ async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === \"install\") {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response = undefined;\n        const params = handler.params || {};\n        // Fallback to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== \"production\") {\n                logger.warn(`The precached response for ${getFriendlyURL(request.url)} in ${this.cacheName} was not found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== \"no-cors\" ? integrityInRequest || integrityInManifest : undefined\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest && noIntegrityConflict && request.mode !== \"no-cors\") {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== \"production\") {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        } else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new SerwistError(\"missing-precache-entry\", {\n                cacheName: this.cacheName,\n                url: request.url\n            });\n        }\n        if (process.env.NODE_ENV !== \"production\") {\n            const cacheKey = params.cacheKey || await handler.getCacheKey(request, \"read\");\n            // Serwist is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ${getFriendlyURL(request.url)}`);\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(\"View request details here.\");\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(\"View response details here.\");\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new SerwistError(\"bad-precaching-response\", {\n                url: request.url,\n                status: response.status\n            });\n        }\n        return response;\n    }\n    /**\n   * This method is complex, as there a number of things to account for:\n   *\n   * The `plugins` array can be set at construction, and/or it might be added to\n   * to at any time before the strategy is used.\n   *\n   * At the time the strategy is used (i.e. during an `install` event), there\n   * needs to be at least one plugin that implements `cacheWillUpdate` in the\n   * array, other than `copyRedirectedCacheableResponsesPlugin`.\n   *\n   * - If this method is called and there are no suitable `cacheWillUpdate`\n   * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n   *\n   * - If this method is called and there is exactly one `cacheWillUpdate`, then\n   * we don't have to do anything (this might be a previously added\n   * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n   *\n   * - If this method is called and there is more than one `cacheWillUpdate`,\n   * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n   * we need to remove it. (This situation is unlikely, but it could happen if\n   * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n   * and then later on after manually adding a custom `cacheWillUpdate`.)\n   *\n   * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n   *\n   * @private\n   */ _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()){\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        } else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n    // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */ class PrecacheCacheKeyPlugin {\n    _precacheController;\n    constructor({ precacheController }){\n        this._precacheController = precacheController;\n    }\n    cacheKeyWillBeUsed = async ({ request, params })=>{\n        // Params is type any, can't change right now.\n        /* eslint-disable */ const cacheKey = params?.cacheKey || this._precacheController.getCacheKeyForURL(request.url);\n        /* eslint-enable */ return cacheKey ? new Request(cacheKey, {\n            headers: request.headers\n        }) : request;\n    };\n}\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */ class PrecacheInstallReportPlugin {\n    updatedURLs = [];\n    notUpdatedURLs = [];\n    handlerWillStart = async ({ request, state })=>{\n        // TODO: `state` should never be undefined...\n        if (state) {\n            state.originalRequest = request;\n        }\n    };\n    cachedResponseWillBeUsed = async ({ event, state, cachedResponse })=>{\n        if (event.type === \"install\") {\n            if (state?.originalRequest && state.originalRequest instanceof Request) {\n                // TODO: `state` should never be undefined...\n                const url = state.originalRequest.url;\n                if (cachedResponse) {\n                    this.notUpdatedURLs.push(url);\n                } else {\n                    this.updatedURLs.push(url);\n                }\n            }\n        }\n        return cachedResponse;\n    };\n}\n\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = \"__WB_REVISION__\";\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param entry\n * @returns A URL with versioning info.\n *\n * @private\n */ function createCacheKey(entry) {\n    if (!entry) {\n        throw new SerwistError(\"add-to-cache-list-unexpected-type\", {\n            entry\n        });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === \"string\") {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new SerwistError(\"add-to-cache-list-unexpected-type\", {\n            entry\n        });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Serwist\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href\n    };\n}\n\n/**\n * @param groupTitle\n * @param deletedURLs\n *\n * @private\n */ const logGroup = (groupTitle, deletedURLs)=>{\n    logger.groupCollapsed(groupTitle);\n    for (const url of deletedURLs){\n        logger.log(url);\n    }\n    logger.groupEnd();\n};\n/**\n * @param deletedURLs\n * @private\n */ function printCleanupDetails(deletedURLs) {\n    const deletionCount = deletedURLs.length;\n    if (deletionCount > 0) {\n        logger.groupCollapsed(`During precaching cleanup, ${deletionCount} cached request${deletionCount === 1 ? \" was\" : \"s were\"} deleted.`);\n        logGroup(\"Deleted Cache Requests\", deletedURLs);\n        logger.groupEnd();\n    }\n}\n\n/**\n * @param groupTitle\n * @param urls\n *\n * @private\n */ function _nestedGroup(groupTitle, urls) {\n    if (urls.length === 0) {\n        return;\n    }\n    logger.groupCollapsed(groupTitle);\n    for (const url of urls){\n        logger.log(url);\n    }\n    logger.groupEnd();\n}\n/**\n * @param urlsToPrecache\n * @param  urlsAlreadyPrecached\n * @private\n */ function printInstallDetails(urlsToPrecache, urlsAlreadyPrecached) {\n    const precachedCount = urlsToPrecache.length;\n    const alreadyPrecachedCount = urlsAlreadyPrecached.length;\n    if (precachedCount || alreadyPrecachedCount) {\n        let message = `Precaching ${precachedCount} file${precachedCount === 1 ? \"\" : \"s\"}.`;\n        if (alreadyPrecachedCount > 0) {\n            message += ` ${alreadyPrecachedCount} ` + `file${alreadyPrecachedCount === 1 ? \" is\" : \"s are\"} already cached.`;\n        }\n        logger.groupCollapsed(message);\n        _nestedGroup(\"View newly precached URLs.\", urlsToPrecache);\n        _nestedGroup(\"View previously precached URLs.\", urlsAlreadyPrecached);\n        logger.groupEnd();\n    }\n}\n\n/**\n * Performs efficient precaching of assets.\n */ class PrecacheController {\n    _installAndActiveListenersAdded;\n    _strategy;\n    _urlsToCacheKeys = new Map();\n    _urlsToCacheModes = new Map();\n    _cacheKeysToIntegrities = new Map();\n    /**\n   * Create a new PrecacheController.\n   *\n   * @param options\n   */ constructor({ cacheName, plugins = [], fallbackToNetwork = true } = {}){\n        this._strategy = new PrecacheStrategy({\n            cacheName: privateCacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({\n                    precacheController: this\n                })\n            ],\n            fallbackToNetwork\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n   * The strategy created by this controller and\n   * used to cache assets and respond to fetch events.\n   */ get strategy() {\n        return this._strategy;\n    }\n    /**\n   * Adds items to the precache list, removing any duplicates and\n   * stores the files in the precache cache when the service\n   * worker installs.\n   *\n   * This method can be called multiple times.\n   *\n   * @param entries Array of entries to precache.\n   */ precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener(\"install\", this.install);\n            self.addEventListener(\"activate\", this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n   * This method will add items to the precache list, removing duplicates\n   * and ensuring the information is valid.\n   *\n   * @param entries Array of entries to precache.\n   */ addToCacheList(entries) {\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isArray(entries, {\n                moduleName: \"@serwist/precaching\",\n                className: \"PrecacheController\",\n                funcName: \"addToCacheList\",\n                paramName: \"entries\"\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries){\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === \"string\") {\n                urlsToWarnAbout.push(entry);\n            } else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== \"string\" && entry.revision ? \"reload\" : \"default\";\n            if (this._urlsToCacheKeys.has(url) && this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new SerwistError(\"add-to-cache-list-conflicting-entries\", {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey\n                });\n            }\n            if (typeof entry !== \"string\" && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) && this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new SerwistError(\"add-to-cache-list-conflicting-integrities\", {\n                        url\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Serwist is precaching URLs without revision info: ${urlsToWarnAbout.join(\", \")}\\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === \"production\") {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                } else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n   * Precaches new and updated assets. Call this method from the service worker\n   * install event.\n   *\n   * Note: this method calls `event.waitUntil()` for you, so you do not need\n   * to call it yourself in your event handlers.\n   *\n   * @param event\n   * @returns\n   */ install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async ()=>{\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys){\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: \"same-origin\"\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: {\n                        cacheKey\n                    },\n                    request,\n                    event\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== \"production\") {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return {\n                updatedURLs,\n                notUpdatedURLs\n            };\n        });\n    }\n    /**\n   * Deletes assets that are no longer present in the current precache manifest.\n   * Call this method from the service worker activate event.\n   *\n   * Note: this method calls `event.waitUntil()` for you, so you do not need\n   * to call it yourself in your event handlers.\n   *\n   * @param event\n   * @returns\n   */ activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async ()=>{\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests){\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== \"production\") {\n                printCleanupDetails(deletedURLs);\n            }\n            return {\n                deletedURLs\n            };\n        });\n    }\n    /**\n   * Returns a mapping of a precached URL to the corresponding cache key, taking\n   * into account the revision information for the URL.\n   *\n   * @returns A URL to cache key mapping.\n   */ getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n   * Returns a list of all the URLs that have been precached by the current\n   * service worker.\n   *\n   * @returns The precached URLs.\n   */ getCachedURLs() {\n        return [\n            ...this._urlsToCacheKeys.keys()\n        ];\n    }\n    /**\n   * Returns the cache key used for storing a given URL. If that URL is\n   * unversioned, like `/index.html', then the cache key will be the original\n   * URL with a search parameter appended to it.\n   *\n   * @param url A URL whose cache key you want to look up.\n   * @returns The versioned URL that corresponds to a cache key\n   * for the original URL, or undefined if that URL isn't precached.\n   */ getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n   * @param url A cache key whose SRI you want to look up.\n   * @returns The subresource integrity associated with the cache key,\n   * or undefined if it's not set.\n   */ getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n   * This acts as a drop-in replacement for\n   * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n   * with the following differences:\n   *\n   * - It knows what the name of the precache is, and only checks in that cache.\n   * - It allows you to pass in an \"original\" URL without versioning parameters,\n   * and it will automatically look up the correct cache key for the currently\n   * active revision of that URL.\n   *\n   * E.g., `matchPrecache('index.html')` will find the correct precached\n   * response for the currently active service worker, even if the actual cache\n   * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n   *\n   * @param request The key (without revisioning parameters)\n   * to look up in the precache.\n   * @returns\n   */ async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n   * Returns a function that looks up `url` in the precache (taking into\n   * account revision information), and returns the corresponding `Response`.\n   *\n   * @param url The precached URL which will be used to lookup the response.\n   * @return\n   */ createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new SerwistError(\"non-precached-url\", {\n                url\n            });\n        }\n        return (options)=>{\n            options.request = new Request(url);\n            options.params = {\n                cacheKey,\n                ...options.params\n            };\n            return this.strategy.handle(options);\n        };\n    }\n}\n\nlet precacheController;\n/**\n * @returns\n * @private\n */ const getOrCreatePrecacheController = ()=>{\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n\n/**\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\n * response to be used when a given strategy is unable to generate a response.\n *\n * It does this by intercepting the `handlerDidError` plugin callback\n * and returning a precached response, taking the expected revision parameter\n * into account automatically.\n *\n * Unless you explicitly pass in a `PrecacheController` instance to the\n * constructor, the default instance will be used. Generally speaking, most\n * developers will end up using the default.\n */ class PrecacheFallbackPlugin {\n    _fallbackURL;\n    _precacheController;\n    /**\n   * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\n   *\n   * @param config\n   */ constructor({ fallbackURL, precacheController }){\n        this._fallbackURL = fallbackURL;\n        this._precacheController = precacheController || getOrCreatePrecacheController();\n    }\n    /**\n   * @returns The precache response for the fallback URL.\n   * @private\n   */ handlerDidError = ()=>this._precacheController.matchPrecache(this._fallbackURL);\n}\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /**\n * Removes any URL search parameters that should be ignored.\n *\n * @param urlObject The original URL.\n * @param ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @returns The URL with any ignored search parameters removed.\n * @private\n */ function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [\n        ...urlObject.searchParams.keys()\n    ]){\n        if (ignoreURLParametersMatching.some((regExp)=>regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param url\n * @param options\n *\n * @private\n */ function* generateURLVariations(url, { ignoreURLParametersMatching = [\n    /^utm_/,\n    /^fbclid$/\n], directoryIndex = \"index.html\", cleanURLs = true, urlManipulation } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = \"\";\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith(\"/\")) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += \".html\";\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({\n            url: urlObject\n        });\n        for (const urlToAttempt of additionalURLs){\n            yield urlToAttempt.href;\n        }\n    }\n}\n\n/**\n * A subclass of `@serwist/routing.Route` that takes a\n * `@serwist/precaching.PrecacheController`\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n */ class PrecacheRoute extends Route {\n    /**\n   * @param precacheController A `PrecacheController`\n   * instance used to both match requests and respond to fetch events.\n   * @param options Options to control how requests are matched\n   * against the list of precached URLs.\n   */ constructor(precacheController, options){\n        const match = ({ request })=>{\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)){\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return {\n                        cacheKey,\n                        integrity\n                    };\n                }\n            }\n            if (process.env.NODE_ENV !== \"production\") {\n                logger.debug(`Precaching did not find a match for ${getFriendlyURL(request.url)}`);\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\n\n/**\n * Adds plugins to the precaching strategy.\n *\n * @param plugins\n */ function addPlugins(plugins) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.strategy.plugins.push(...plugins);\n}\n\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests)\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param options See the `@serwist/precaching.PrecacheRoute` options.\n */ function addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ // Give TypeScript the correct global.\nconst SUBSTRING_TO_FIND = \"-precache-\";\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Serwist, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param substringToFind Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @returns A list of all the cache names that were deleted.\n * @private\n */ const deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND)=>{\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName)=>{\n        return cacheName.includes(substringToFind) && cacheName.includes(self.registration.scope) && cacheName !== currentPrecacheName;\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName)=>self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\n\n/**\n * Adds an `activate` event listener which will clean up incompatible\n * precaches that were created by older versions of Serwist.\n */ function cleanupOutdatedCaches() {\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener(\"activate\", (event)=>{\n        const cacheName = privateCacheNames.getPrecacheName();\n        event.waitUntil(deleteOutdatedCaches(cacheName).then((cachesDeleted)=>{\n            if (process.env.NODE_ENV !== \"production\") {\n                if (cachesDeleted.length > 0) {\n                    logger.log(\"The following out-of-date precaches were cleaned up \" + \"automatically:\", cachesDeleted);\n                }\n            }\n        }));\n    });\n}\n\n/**\n * Helper function that calls `PrecacheController#createHandlerBoundToURL`\n * on the default `PrecacheController` instance.\n *\n * If you are creating your own `PrecacheController`, then call the\n * `PrecacheController#createHandlerBoundToURL` on that instance,\n * instead of using this function.\n *\n * @param url The precached URL which will be used to lookup the\n * `Response`.\n * @param fallbackToNetwork Whether to attempt to get the\n * response from the network if there's a precache miss.\n * @return\n */ function createHandlerBoundToURL(url) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.createHandlerBoundToURL(url);\n}\n\n/**\n * Takes in a URL, and returns the corresponding URL that could be used to\n * lookup the entry in the precache.\n *\n * If a relative URL is provided, the location of the service worker file will\n * be used as the base.\n *\n * For precached entries without revision information, the cache key will be the\n * same as the original URL.\n *\n * For precached entries with revision information, the cache key will be the\n * original URL with the addition of a query parameter used for keeping track of\n * the revision info.\n *\n * @param url The URL whose cache key to look up.\n * @returns The cache key that corresponds to that URL.\n */ function getCacheKeyForURL(url) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.getCacheKeyForURL(url);\n}\n\n/**\n * Helper function that calls `PrecacheController#matchPrecache`\n * on the default `PrecacheController` instance.\n *\n * If you are creating your own `PrecacheController`, then call\n * `PrecacheController#matchPrecache` on that instance,\n * instead of using this function.\n *\n * @param request The key (without revisioning parameters)\n * to look up in the precache.\n * @returns\n */ function matchPrecache(request) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.matchPrecache(request);\n}\n\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the precache cache when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * `@serwist/precaching.addRoute`.\n *\n * If you have a single array of files to precache, you can just call\n * `@serwist/precaching.precacheAndRoute`.\n *\n * @param entries Array of entries to precache.\n */ function precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\n\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * `@serwist/precaching.precache` and\n * `@serwist/precaching.addRoute` in a single call.\n *\n * @param entries Array of entries to precache.\n * @param options See the `@serwist/precaching.PrecacheRoute` options.\n */ function precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\n\nexport { PrecacheController, PrecacheFallbackPlugin, PrecacheRoute, PrecacheStrategy, addPlugins, addRoute, cleanupOutdatedCaches, createHandlerBoundToURL, getCacheKeyForURL, matchPrecache, precache, precacheAndRoute };\n","import { SerwistError, logger, assert, resultingClientExists, timeout, dontWaitFor } from '@serwist/core/internal';\n\n/**\n * Given two `Response's`, compares several header values to see if they are\n * the same or not.\n *\n * @param firstResponse\n * @param secondResponse\n * @param headersToCheck\n * @returns\n */ const responsesAreSame = (firstResponse, secondResponse, headersToCheck)=>{\n    if (process.env.NODE_ENV !== \"production\") {\n        if (!(firstResponse instanceof Response && secondResponse instanceof Response)) {\n            throw new SerwistError(\"invalid-responses-are-same-args\");\n        }\n    }\n    const atLeastOneHeaderAvailable = headersToCheck.some((header)=>{\n        return firstResponse.headers.has(header) && secondResponse.headers.has(header);\n    });\n    if (!atLeastOneHeaderAvailable) {\n        if (process.env.NODE_ENV !== \"production\") {\n            logger.warn(\"Unable to determine where the response has been updated \" + \"because none of the headers that would be checked are present.\");\n            logger.debug(\"Attempting to compare the following: \", firstResponse, secondResponse, headersToCheck);\n        }\n        // Just return true, indicating the that responses are the same, since we\n        // can't determine otherwise.\n        return true;\n    }\n    return headersToCheck.every((header)=>{\n        const headerStateComparison = firstResponse.headers.has(header) === secondResponse.headers.has(header);\n        const headerValueComparison = firstResponse.headers.get(header) === secondResponse.headers.get(header);\n        return headerStateComparison && headerValueComparison;\n    });\n};\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ const CACHE_UPDATED_MESSAGE_TYPE = \"CACHE_UPDATED\";\nconst CACHE_UPDATED_MESSAGE_META = \"serwist-broadcast-update\";\nconst NOTIFY_ALL_CLIENTS = true;\nconst DEFAULT_HEADERS_TO_CHECK = [\n    \"content-length\",\n    \"etag\",\n    \"last-modified\"\n];\n\n// UA-sniff Safari: https://stackoverflow.com/questions/7944460/detect-safari-browser\n// TODO(philipwalton): remove once this Safari bug fix has been released.\n// https://bugs.webkit.org/show_bug.cgi?id=201169\nconst isSafari = typeof navigator !== \"undefined\" && /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n/**\n * Generates the default payload used in update messages. By default the\n * payload includes the `cacheName` and `updatedURL` fields.\n *\n * @returns\n * @private\n */ function defaultPayloadGenerator(data) {\n    return {\n        cacheName: data.cacheName,\n        updatedURL: data.request.url\n    };\n}\n/**\n * Uses the `postMessage()` API to inform any open windows/tabs when a cached\n * response has been updated.\n *\n * For efficiency's sake, the underlying response bodies are not compared;\n * only specific response headers are checked.\n */ class BroadcastCacheUpdate {\n    _headersToCheck;\n    _generatePayload;\n    _notifyAllClients;\n    /**\n   * Construct a BroadcastCacheUpdate instance with a specific `channelName` to\n   * broadcast messages on\n   *\n   * @param options\n   */ constructor({ generatePayload, headersToCheck, notifyAllClients } = {}){\n        this._headersToCheck = headersToCheck || DEFAULT_HEADERS_TO_CHECK;\n        this._generatePayload = generatePayload || defaultPayloadGenerator;\n        this._notifyAllClients = notifyAllClients ?? NOTIFY_ALL_CLIENTS;\n    }\n    /**\n   * Compares two [Responses](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n   * and sends a message (via `postMessage()`) to all window clients if the\n   * responses differ. Neither of the Responses can be\n   * [opaque](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n   *\n   * The message that's posted has the following format (where `payload` can\n   * be customized via the `generatePayload` option the instance is created\n   * with):\n   *\n   * ```\n   * {\n   *   type: 'CACHE_UPDATED',\n   *   meta: 'workbox-broadcast-update',\n   *   payload: {\n   *     cacheName: 'the-cache-name',\n   *     updatedURL: 'https://example.com/'\n   *   }\n   * }\n   * ```\n   *\n   * @param options\n   * @returns Resolves once the update is sent.\n   */ async notifyIfUpdated(options) {\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isType(options.cacheName, \"string\", {\n                moduleName: \"@serwist/broadcast-update\",\n                className: \"BroadcastCacheUpdate\",\n                funcName: \"notifyIfUpdated\",\n                paramName: \"cacheName\"\n            });\n            assert.isInstance(options.newResponse, Response, {\n                moduleName: \"@serwist/broadcast-update\",\n                className: \"BroadcastCacheUpdate\",\n                funcName: \"notifyIfUpdated\",\n                paramName: \"newResponse\"\n            });\n            assert.isInstance(options.request, Request, {\n                moduleName: \"@serwist/broadcast-update\",\n                className: \"BroadcastCacheUpdate\",\n                funcName: \"notifyIfUpdated\",\n                paramName: \"request\"\n            });\n        }\n        // Without two responses there is nothing to compare.\n        if (!options.oldResponse) {\n            return;\n        }\n        if (!responsesAreSame(options.oldResponse, options.newResponse, this._headersToCheck)) {\n            if (process.env.NODE_ENV !== \"production\") {\n                logger.log(\"Newer response found (and cached) for:\", options.request.url);\n            }\n            const messageData = {\n                type: CACHE_UPDATED_MESSAGE_TYPE,\n                meta: CACHE_UPDATED_MESSAGE_META,\n                payload: this._generatePayload(options)\n            };\n            // For navigation requests, wait until the new window client exists\n            // before sending the message\n            if (options.request.mode === \"navigate\") {\n                let resultingClientId;\n                if (options.event instanceof FetchEvent) {\n                    resultingClientId = options.event.resultingClientId;\n                }\n                const resultingWin = await resultingClientExists(resultingClientId);\n                // Safari does not currently implement postMessage buffering and\n                // there's no good way to feature detect that, so to increase the\n                // chances of the message being delivered in Safari, we add a timeout.\n                // We also do this if `resultingClientExists()` didn't return a client,\n                // which means it timed out, so it's worth waiting a bit longer.\n                if (!resultingWin || isSafari) {\n                    // 3500 is chosen because (according to CrUX data) 80% of mobile\n                    // websites hit the DOMContentLoaded event in less than 3.5 seconds.\n                    // And presumably sites implementing service worker are on the\n                    // higher end of the performance spectrum.\n                    await timeout(3500);\n                }\n            }\n            if (this._notifyAllClients) {\n                const windows = await self.clients.matchAll({\n                    type: \"window\"\n                });\n                for (const win of windows){\n                    win.postMessage(messageData);\n                }\n            } else {\n                // See https://github.com/GoogleChrome/workbox/issues/2895\n                if (options.event instanceof FetchEvent) {\n                    const client = await self.clients.get(options.event.clientId);\n                    client?.postMessage(messageData);\n                }\n            }\n        }\n    }\n}\n\n/**\n * This plugin will automatically broadcast a message whenever a cached response\n * is updated.\n */ class BroadcastUpdatePlugin {\n    _broadcastUpdate;\n    /**\n   * Construct a `@serwist/broadcast-update.BroadcastCacheUpdate` instance with\n   * the passed options and calls its `notifyIfUpdated` method whenever the\n   * plugin's `cacheDidUpdate` callback is invoked.\n   *\n   * @param options\n   */ constructor(options){\n        this._broadcastUpdate = new BroadcastCacheUpdate(options);\n    }\n    /**\n   * A \"lifecycle\" callback that will be triggered automatically by\n   * `@serwist/build.RuntimeCaching` handlers when an entry is\n   * added to a cache.\n   *\n   * @private\n   * @param options The input object to this function.\n   */ cacheDidUpdate = async (options)=>{\n        dontWaitFor(this._broadcastUpdate.notifyIfUpdated(options));\n    };\n}\n\nexport { BroadcastCacheUpdate, BroadcastUpdatePlugin, responsesAreSame };\n","import { SerwistError, assert, logger, getFriendlyURL } from '@serwist/core/internal';\n\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n */ class CacheableResponse {\n    _statuses;\n    _headers;\n    /**\n   * To construct a new CacheableResponse instance you must provide at least\n   * one of the `config` properties.\n   *\n   * If both `statuses` and `headers` are specified, then both conditions must\n   * be met for the `Response` to be considered cacheable.\n   *\n   * @param config\n   */ constructor(config = {}){\n        if (process.env.NODE_ENV !== \"production\") {\n            if (!(config.statuses || config.headers)) {\n                throw new SerwistError(\"statuses-or-headers-required\", {\n                    moduleName: \"@serwist/cacheable-response\",\n                    className: \"CacheableResponse\",\n                    funcName: \"constructor\"\n                });\n            }\n            if (config.statuses) {\n                assert.isArray(config.statuses, {\n                    moduleName: \"@serwist/cacheable-response\",\n                    className: \"CacheableResponse\",\n                    funcName: \"constructor\",\n                    paramName: \"config.statuses\"\n                });\n            }\n            if (config.headers) {\n                assert.isType(config.headers, \"object\", {\n                    moduleName: \"@serwist/cacheable-response\",\n                    className: \"CacheableResponse\",\n                    funcName: \"constructor\",\n                    paramName: \"config.headers\"\n                });\n            }\n        }\n        this._statuses = config.statuses;\n        this._headers = config.headers;\n    }\n    /**\n   * Checks a response to see whether it's cacheable or not, based on this\n   * object's configuration.\n   *\n   * @param response The response whose cacheability is being\n   * checked.\n   * @returns `true` if the `Response` is cacheable, and `false`\n   * otherwise.\n   */ isResponseCacheable(response) {\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isInstance(response, Response, {\n                moduleName: \"@serwist/cacheable-response\",\n                className: \"CacheableResponse\",\n                funcName: \"isResponseCacheable\",\n                paramName: \"response\"\n            });\n        }\n        let cacheable = true;\n        if (this._statuses) {\n            cacheable = this._statuses.includes(response.status);\n        }\n        if (this._headers && cacheable) {\n            cacheable = Object.keys(this._headers).some((headerName)=>{\n                return response.headers.get(headerName) === this._headers[headerName];\n            });\n        }\n        if (process.env.NODE_ENV !== \"production\") {\n            if (!cacheable) {\n                logger.groupCollapsed(`The request for '${getFriendlyURL(response.url)}' returned a response that does not meet the criteria for being cached.`);\n                logger.groupCollapsed(\"View cacheability criteria here.\");\n                logger.log(`Cacheable statuses: ${JSON.stringify(this._statuses)}`);\n                logger.log(`Cacheable headers: ${JSON.stringify(this._headers, null, 2)}`);\n                logger.groupEnd();\n                const logFriendlyHeaders = {};\n                response.headers.forEach((value, key)=>{\n                    logFriendlyHeaders[key] = value;\n                });\n                logger.groupCollapsed(\"View response status and headers here.\");\n                logger.log(`Response status: ${response.status}`);\n                logger.log(`Response headers: ${JSON.stringify(logFriendlyHeaders, null, 2)}`);\n                logger.groupEnd();\n                logger.groupCollapsed(\"View full response details here.\");\n                logger.log(response.headers);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n            }\n        }\n        return cacheable;\n    }\n}\n\n/**\n * A class implementing the `cacheWillUpdate` lifecycle callback. This makes it\n * easier to add in cacheability checks to requests made via Serwist's built-in\n * strategies.\n */ class CacheableResponsePlugin {\n    _cacheableResponse;\n    /**\n   * To construct a new CacheableResponsePlugin instance you must provide at\n   * least one of the `config` properties.\n   *\n   * If both `statuses` and `headers` are specified, then both conditions must\n   * be met for the `Response` to be considered cacheable.\n   *\n   * @param config\n   */ constructor(config){\n        this._cacheableResponse = new CacheableResponse(config);\n    }\n    /**\n   * @param options\n   * @returns\n   * @private\n   */ cacheWillUpdate = async ({ response })=>{\n        if (this._cacheableResponse.isResponseCacheable(response)) {\n            return response;\n        }\n        return null;\n    };\n}\n\nexport { CacheableResponse, CacheableResponsePlugin };\n","import { assert, SerwistError, logger, dontWaitFor, privateCacheNames, getFriendlyURL } from '@serwist/core/internal';\nimport { deleteDB, openDB } from 'idb';\nimport { registerQuotaErrorCallback } from '@serwist/core';\n\nconst DB_NAME = \"serwist-expiration\";\nconst CACHE_OBJECT_STORE = \"cache-entries\";\nconst normalizeURL = (unNormalizedUrl)=>{\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = \"\";\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */ class CacheTimestampsModel {\n    _cacheName;\n    _db = null;\n    /**\n   *\n   * @param cacheName\n   *\n   * @private\n   */ constructor(cacheName){\n        this._cacheName = cacheName;\n    }\n    /**\n   * Performs an upgrade of indexedDB.\n   *\n   * @param db\n   *\n   * @private\n   */ _upgradeDb(db) {\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, {\n            keyPath: \"id\"\n        });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex(\"cacheName\", \"cacheName\", {\n            unique: false\n        });\n        objStore.createIndex(\"timestamp\", \"timestamp\", {\n            unique: false\n        });\n    }\n    /**\n   * Performs an upgrade of indexedDB and deletes deprecated DBs.\n   *\n   * @param db\n   *\n   * @private\n   */ _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void deleteDB(this._cacheName);\n        }\n    }\n    /**\n   * @param url\n   * @param timestamp\n   *\n   * @private\n   */ async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url)\n        };\n        const db = await this.getDb();\n        const tx = db.transaction(CACHE_OBJECT_STORE, \"readwrite\", {\n            durability: \"relaxed\"\n        });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    /**\n   * Returns the timestamp stored for a given URL.\n   *\n   * @param url\n   * @returns\n   * @private\n   */ async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry?.timestamp;\n    }\n    /**\n   * Iterates through all the entries in the object store (from newest to\n   * oldest) and removes entries once either `maxCount` is reached or the\n   * entry's timestamp is less than `minTimestamp`.\n   *\n   * @param minTimestamp\n   * @param maxCount\n   * @returns\n   * @private\n   */ async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db.transaction(CACHE_OBJECT_STORE).store.index(\"timestamp\").openCursor(null, \"prev\");\n        const entriesToDelete = [];\n        let entriesNotDeletedCount = 0;\n        while(cursor){\n            const result = cursor.value;\n            // TODO(philipwalton): once we can use a multi-key index, we\n            // won't have to check `cacheName` here.\n            if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if (minTimestamp && result.timestamp < minTimestamp || maxCount && entriesNotDeletedCount >= maxCount) {\n                    // TODO(philipwalton): we should be able to delete the\n                    // entry right here, but doing so causes an iteration\n                    // bug in Safari stable (fixed in TP). Instead we can\n                    // store the keys of the entries to delete, and then\n                    // delete the separate transactions.\n                    // https://github.com/GoogleChrome/workbox/issues/1978\n                    // cursor.delete();\n                    // We only need to return the URL, not the whole entry.\n                    entriesToDelete.push(cursor.value);\n                } else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete){\n            await db.delete(CACHE_OBJECT_STORE, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n   * Takes a URL and returns an ID that will be unique in the object store.\n   *\n   * @param url\n   * @returns\n   * @private\n   */ _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return `${this._cacheName}|${normalizeURL(url)}`;\n    }\n    /**\n   * Returns an open connection to the database.\n   *\n   * @private\n   */ async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this)\n            });\n        }\n        return this._db;\n    }\n}\n\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n */ class CacheExpiration {\n    _isRunning = false;\n    _rerunRequested = false;\n    _maxEntries;\n    _maxAgeSeconds;\n    _matchOptions;\n    _cacheName;\n    _timestampModel;\n    /**\n   * To construct a new CacheExpiration instance you must provide at least\n   * one of the `config` properties.\n   *\n   * @param cacheName Name of the cache to apply restrictions to.\n   * @param config\n   */ constructor(cacheName, config = {}){\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isType(cacheName, \"string\", {\n                moduleName: \"@serwist/expiration\",\n                className: \"CacheExpiration\",\n                funcName: \"constructor\",\n                paramName: \"cacheName\"\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new SerwistError(\"max-entries-or-age-required\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"CacheExpiration\",\n                    funcName: \"constructor\"\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, \"number\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"CacheExpiration\",\n                    funcName: \"constructor\",\n                    paramName: \"config.maxEntries\"\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, \"number\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"CacheExpiration\",\n                    funcName: \"constructor\",\n                    paramName: \"config.maxAgeSeconds\"\n                });\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._matchOptions = config.matchOptions;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    /**\n   * Expires entries for the given cache and given criteria.\n   */ async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds ? Date.now() - this._maxAgeSeconds * 1000 : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        // Delete URLs from the cache\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired){\n            await cache.delete(url, this._matchOptions);\n        }\n        if (process.env.NODE_ENV !== \"production\") {\n            if (urlsExpired.length > 0) {\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` + `${urlsExpired.length === 1 ? \"entry\" : \"entries\"} and removed ` + `${urlsExpired.length === 1 ? \"it\" : \"them\"} from the ` + `'${this._cacheName}' cache.`);\n                logger.log(`Expired the following ${urlsExpired.length === 1 ? \"URL\" : \"URLs\"}:`);\n                for (const url of urlsExpired){\n                    logger.log(`    ${url}`);\n                }\n                logger.groupEnd();\n            } else {\n                logger.debug(\"Cache expiration ran and found no entries to remove.\");\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            dontWaitFor(this.expireEntries());\n        }\n    }\n    /**\n   * Update the timestamp for the given URL. This ensures the when\n   * removing entries based on maximum entries, most recently used\n   * is accurate or when expiring, the timestamp is up-to-date.\n   *\n   * @param url\n   */ async updateTimestamp(url) {\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isType(url, \"string\", {\n                moduleName: \"@serwist/expiration\",\n                className: \"CacheExpiration\",\n                funcName: \"updateTimestamp\",\n                paramName: \"url\"\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    /**\n   * Can be used to check if a URL has expired or not before it's used.\n   *\n   * This requires a look up from IndexedDB, so can be slow.\n   *\n   * Note: This method will not remove the cached entry, call\n   * `expireEntries()` to remove indexedDB and Cache entries.\n   *\n   * @param url\n   * @returns\n   */ async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (process.env.NODE_ENV !== \"production\") {\n                throw new SerwistError(\"expired-test-without-max-age\", {\n                    methodName: \"isURLExpired\",\n                    paramName: \"maxAgeSeconds\"\n                });\n            }\n            return false;\n        }\n        const timestamp = await this._timestampModel.getTimestamp(url);\n        const expireOlderThan = Date.now() - this._maxAgeSeconds * 1000;\n        return timestamp !== undefined ? timestamp < expireOlderThan : true;\n    }\n    /**\n   * Removes the IndexedDB object store used to keep track of cache expiration\n   * metadata.\n   */ async delete() {\n        // Make sure we don't attempt another rerun if we're called in the middle of\n        // a cache expiration.\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\n    }\n}\n\n/**\n * This plugin can be used in a `@serwist/strategies` Strategy to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * It can only be used with Strategy instances that have a\n * [custom `cacheName` property set](/web/tools/workbox/guides/configure-workbox#custom_cache_names_in_strategies).\n * In other words, it can't be used to expire entries in strategy that uses the\n * default runtime cache name.\n *\n * Whenever a cached response is used or updated, this plugin will look\n * at the associated cache and remove any old or extra responses.\n *\n * When using `maxAgeSeconds`, responses may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached response has been used. If the response has a \"Date\" header, then\n * a light weight expiration check is performed and the response will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n */ class ExpirationPlugin {\n    _config;\n    _maxAgeSeconds;\n    _cacheExpirations;\n    /**\n   * @param config\n   */ constructor(config = {}){\n        if (process.env.NODE_ENV !== \"production\") {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new SerwistError(\"max-entries-or-age-required\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"Plugin\",\n                    funcName: \"constructor\"\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, \"number\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"Plugin\",\n                    funcName: \"constructor\",\n                    paramName: \"config.maxEntries\"\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, \"number\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"Plugin\",\n                    funcName: \"constructor\",\n                    paramName: \"config.maxAgeSeconds\"\n                });\n            }\n        }\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) {\n            registerQuotaErrorCallback(()=>this.deleteCacheAndMetadata());\n        }\n    }\n    /**\n   * A simple helper method to return a CacheExpiration instance for a given\n   * cache name.\n   *\n   * @param cacheName\n   * @returns\n   * @private\n   */ _getCacheExpiration(cacheName) {\n        if (cacheName === privateCacheNames.getRuntimeName()) {\n            throw new SerwistError(\"expire-custom-caches-only\");\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n   * A \"lifecycle\" callback that will be triggered automatically by the\n   * `@serwist/strategies` handlers when a `Response` is about to be returned\n   * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n   * the handler. It allows the `Response` to be inspected for freshness and\n   * prevents it from being used if the `Response`'s `Date` header value is\n   * older than the configured `maxAgeSeconds`.\n   *\n   * @param options\n   * @returns Either the `cachedResponse`, if it's fresh, or `null` if the `Response`\n   * is older than `maxAgeSeconds`.\n   * @private\n   */ cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse })=>{\n        if (!cachedResponse) {\n            return null;\n        }\n        const isFresh = this._isResponseDateFresh(cachedResponse);\n        // Expire entries to ensure that even if the expiration date has\n        // expired, it'll only be used once.\n        const cacheExpiration = this._getCacheExpiration(cacheName);\n        dontWaitFor(cacheExpiration.expireEntries());\n        // Update the metadata for the request URL to the current timestamp,\n        // but don't `await` it as we don't want to block the response.\n        const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n        if (event) {\n            try {\n                event.waitUntil(updateTimestampDone);\n            } catch (error) {\n                if (process.env.NODE_ENV !== \"production\") {\n                    // The event may not be a fetch event; only log the URL if it is.\n                    if (\"request\" in event) {\n                        logger.warn(`Unable to ensure service worker stays alive when updating cache entry for '${getFriendlyURL(event.request.url)}'.`);\n                    }\n                }\n            }\n        }\n        return isFresh ? cachedResponse : null;\n    };\n    /**\n   * @param cachedResponse\n   * @returns\n   * @private\n   */ _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) {\n            // We aren't expiring by age, so return true, it's fresh\n            return true;\n        }\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            // Unable to parse date, so assume it's fresh.\n            return true;\n        }\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - this._maxAgeSeconds * 1000;\n    }\n    /**\n   * This method will extract the data header and parse it into a useful\n   * value.\n   *\n   * @param cachedResponse\n   * @returns\n   * @private\n   */ _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has(\"date\")) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get(\"date\");\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (Number.isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    /**\n   * A \"lifecycle\" callback that will be triggered automatically by the\n   * `@serwist/strategies` handlers when an entry is added to a cache.\n   *\n   * @param options\n   * @private\n   */ cacheDidUpdate = async ({ cacheName, request })=>{\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isType(cacheName, \"string\", {\n                moduleName: \"@serwist/expiration\",\n                className: \"Plugin\",\n                funcName: \"cacheDidUpdate\",\n                paramName: \"cacheName\"\n            });\n            assert.isInstance(request, Request, {\n                moduleName: \"@serwist/expiration\",\n                className: \"Plugin\",\n                funcName: \"cacheDidUpdate\",\n                paramName: \"request\"\n            });\n        }\n        const cacheExpiration = this._getCacheExpiration(cacheName);\n        await cacheExpiration.updateTimestamp(request.url);\n        await cacheExpiration.expireEntries();\n    };\n    /**\n   * This is a helper method that performs two operations:\n   *\n   * - Deletes *all* the underlying Cache instances associated with this plugin\n   * instance, by calling caches.delete() on your behalf.\n   * - Deletes the metadata from IndexedDB used to keep track of expiration\n   * details for each Cache instance.\n   *\n   * When using cache expiration, calling this method is preferable to calling\n   * `caches.delete()` directly, since this will ensure that the IndexedDB\n   * metadata is also cleanly removed and open IndexedDB instances are deleted.\n   *\n   * Note that if you're *not* using cache expiration for a given cache, calling\n   * `caches.delete()` and passing in the cache's name should be sufficient.\n   * There is no Serwist-specific method needed for cleanup in that case.\n   */ async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations){\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\n\nexport { CacheExpiration, ExpirationPlugin };\n","import { assert, SerwistError, logger } from '@serwist/core/internal';\n\n/**\n * @param blob A source blob.\n * @param start The offset to use as the start of the\n * slice.\n * @param end The offset to use as the end of the slice.\n * @returns An object with `start` and `end` properties, reflecting\n * the effective boundaries to use given the size of the blob.\n * @private\n */ function calculateEffectiveBoundaries(blob, start, end) {\n    if (process.env.NODE_ENV !== \"production\") {\n        assert.isInstance(blob, Blob, {\n            moduleName: \"@serwist/range-requests\",\n            funcName: \"calculateEffectiveBoundaries\",\n            paramName: \"blob\"\n        });\n    }\n    const blobSize = blob.size;\n    if (end && end > blobSize || start && start < 0) {\n        throw new SerwistError(\"range-not-satisfiable\", {\n            size: blobSize,\n            end,\n            start\n        });\n    }\n    let effectiveStart;\n    let effectiveEnd;\n    if (start !== undefined && end !== undefined) {\n        effectiveStart = start;\n        // Range values are inclusive, so add 1 to the value.\n        effectiveEnd = end + 1;\n    } else if (start !== undefined && end === undefined) {\n        effectiveStart = start;\n        effectiveEnd = blobSize;\n    } else if (end !== undefined && start === undefined) {\n        effectiveStart = blobSize - end;\n        effectiveEnd = blobSize;\n    }\n    return {\n        start: effectiveStart,\n        end: effectiveEnd\n    };\n}\n\n/**\n * @param rangeHeader A Range: header value.\n * @returns An object with `start` and `end` properties, reflecting\n * the parsed value of the Range: header. If either the `start` or `end` are\n * omitted, then `null` will be returned.\n * @private\n */ function parseRangeHeader(rangeHeader) {\n    if (process.env.NODE_ENV !== \"production\") {\n        assert.isType(rangeHeader, \"string\", {\n            moduleName: \"@serwist/range-requests\",\n            funcName: \"parseRangeHeader\",\n            paramName: \"rangeHeader\"\n        });\n    }\n    const normalizedRangeHeader = rangeHeader.trim().toLowerCase();\n    if (!normalizedRangeHeader.startsWith(\"bytes=\")) {\n        throw new SerwistError(\"unit-must-be-bytes\", {\n            normalizedRangeHeader\n        });\n    }\n    // Specifying multiple ranges separate by commas is valid syntax, but this\n    // library only attempts to handle a single, contiguous sequence of bytes.\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range#Syntax\n    if (normalizedRangeHeader.includes(\",\")) {\n        throw new SerwistError(\"single-range-only\", {\n            normalizedRangeHeader\n        });\n    }\n    const rangeParts = /(\\d*)-(\\d*)/.exec(normalizedRangeHeader);\n    // We need either at least one of the start or end values.\n    if (!rangeParts || !(rangeParts[1] || rangeParts[2])) {\n        throw new SerwistError(\"invalid-range-values\", {\n            normalizedRangeHeader\n        });\n    }\n    return {\n        start: rangeParts[1] === \"\" ? undefined : Number(rangeParts[1]),\n        end: rangeParts[2] === \"\" ? undefined : Number(rangeParts[2])\n    };\n}\n\n/**\n * Given a `Request` and `Response` objects as input, this will return a\n * promise for a new `Response`.\n *\n * If the original `Response` already contains partial content (i.e. it has\n * a status of 206), then this assumes it already fulfills the `Range:`\n * requirements, and will return it as-is.\n *\n * @param request A request, which should contain a Range:\n * header.\n * @param originalResponse A response.\n * @returns Either a `206 Partial Content` response, with\n * the response body set to the slice of content specified by the request's\n * `Range:` header, or a `416 Range Not Satisfiable` response if the\n * conditions of the `Range:` header can't be met.\n */ async function createPartialResponse(request, originalResponse) {\n    try {\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.isInstance(request, Request, {\n                moduleName: \"@serwist/range-requests\",\n                funcName: \"createPartialResponse\",\n                paramName: \"request\"\n            });\n            assert.isInstance(originalResponse, Response, {\n                moduleName: \"@serwist/range-requests\",\n                funcName: \"createPartialResponse\",\n                paramName: \"originalResponse\"\n            });\n        }\n        if (originalResponse.status === 206) {\n            // If we already have a 206, then just pass it through as-is;\n            // see https://github.com/GoogleChrome/workbox/issues/1720\n            return originalResponse;\n        }\n        const rangeHeader = request.headers.get(\"range\");\n        if (!rangeHeader) {\n            throw new SerwistError(\"no-range-header\");\n        }\n        const boundaries = parseRangeHeader(rangeHeader);\n        const originalBlob = await originalResponse.blob();\n        const effectiveBoundaries = calculateEffectiveBoundaries(originalBlob, boundaries.start, boundaries.end);\n        const slicedBlob = originalBlob.slice(effectiveBoundaries.start, effectiveBoundaries.end);\n        const slicedBlobSize = slicedBlob.size;\n        const slicedResponse = new Response(slicedBlob, {\n            // Status code 206 is for a Partial Content response.\n            // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/206\n            status: 206,\n            statusText: \"Partial Content\",\n            headers: originalResponse.headers\n        });\n        slicedResponse.headers.set(\"Content-Length\", String(slicedBlobSize));\n        slicedResponse.headers.set(\"Content-Range\", `bytes ${effectiveBoundaries.start}-${effectiveBoundaries.end - 1}/` + `${originalBlob.size}`);\n        return slicedResponse;\n    } catch (error) {\n        if (process.env.NODE_ENV !== \"production\") {\n            logger.warn(\"Unable to construct a partial response; returning a \" + \"416 Range Not Satisfiable response instead.\");\n            logger.groupCollapsed(\"View details here.\");\n            logger.log(error);\n            logger.log(request);\n            logger.log(originalResponse);\n            logger.groupEnd();\n        }\n        return new Response(\"\", {\n            status: 416,\n            statusText: \"Range Not Satisfiable\"\n        });\n    }\n}\n\n/**\n * The range request plugin makes it easy for a request with a 'Range' header to\n * be fulfilled by a cached response.\n *\n * It does this by intercepting the `cachedResponseWillBeUsed` plugin callback\n * and returning the appropriate subset of the cached response body.\n */ class RangeRequestsPlugin {\n    /**\n   * @param options\n   * @returns If request contains a 'Range' header, then a\n   * new response with status 206 whose body is a subset of `cachedResponse` is\n   * returned. Otherwise, `cachedResponse` is returned as-is.\n   * @private\n   */ cachedResponseWillBeUsed = async ({ request, cachedResponse })=>{\n        // Only return a sliced response if there's something valid in the cache,\n        // and there's a Range: header in the request.\n        if (cachedResponse && request.headers.has(\"range\")) {\n            return await createPartialResponse(request, cachedResponse);\n        }\n        // If there was no Range: header, or if cachedResponse wasn't valid, just\n        // pass it through as-is.\n        return cachedResponse;\n    };\n}\n\nexport { RangeRequestsPlugin, createPartialResponse };\n","import { setCacheNameDetails, clientsClaim } from '@serwist/core';\nimport { initialize } from '@serwist/google-analytics/initialize';\nimport { enable } from '@serwist/navigation-preload';\nimport { precacheAndRoute, cleanupOutdatedCaches, createHandlerBoundToURL, PrecacheFallbackPlugin } from '@serwist/precaching';\nimport { registerRoute, NavigationRoute } from '@serwist/routing';\nimport { BackgroundSyncPlugin } from '@serwist/background-sync';\nimport { BroadcastUpdatePlugin } from '@serwist/broadcast-update';\nimport { CacheableResponsePlugin } from '@serwist/cacheable-response';\nimport { ExpirationPlugin } from '@serwist/expiration';\nimport { RangeRequestsPlugin } from '@serwist/range-requests';\nimport { CacheFirst, CacheOnly, NetworkFirst, NetworkOnly, StaleWhileRevalidate } from '@serwist/strategies';\n\nconst disableDevLogs = ()=>{\n    self.__WB_DISABLE_DEV_LOGS = true;\n};\n\nconst fallbacks = ({ runtimeCaching, entries, precacheOptions })=>{\n    precacheAndRoute(entries.map(({ url, revision })=>({\n            url: typeof url === \"string\" ? url : url.toString(),\n            revision\n        })), precacheOptions);\n    runtimeCaching = runtimeCaching.map((cacheEntry)=>{\n        if (!cacheEntry.options || cacheEntry.options.precacheFallback || cacheEntry.options.plugins?.some((plugin)=>\"handlerDidError\" in plugin)) {\n            return cacheEntry;\n        }\n        if (!cacheEntry.options.plugins) {\n            cacheEntry.options.plugins = [];\n        }\n        cacheEntry.options.plugins.push({\n            async handlerDidError (info) {\n                for (const { matcher, url, cacheMatchOptions = {\n                    ignoreSearch: true\n                } } of entries){\n                    if (matcher(info)) {\n                        return caches.match(url, cacheMatchOptions);\n                    }\n                }\n                return Response.error();\n            }\n        });\n        return cacheEntry;\n    });\n    return runtimeCaching;\n};\n\nconst handlePrecaching = ({ precacheEntries, precacheOptions, cleanupOutdatedCaches: shouldCleanupOutdatedCaches = false, ...options })=>{\n    if (!!precacheEntries && precacheEntries.length > 0) {\n        /**\n     * The precacheAndRoute() method efficiently caches and responds to\n     * requests for URLs in the manifest.\n     * See https://goo.gl/S9QRab\n     */ precacheAndRoute(precacheEntries, precacheOptions);\n    }\n    if (shouldCleanupOutdatedCaches) cleanupOutdatedCaches();\n    if (options.navigateFallback) {\n        registerRoute(new NavigationRoute(createHandlerBoundToURL(options.navigateFallback), {\n            allowlist: options.navigateFallbackAllowlist,\n            denylist: options.navigateFallbackDenylist\n        }));\n    }\n};\n\nconst nonNullable = (value)=>value !== null && value !== undefined;\n\nconst HANDLER_NAME_TO_METHOD = {\n    CacheFirst,\n    CacheOnly,\n    NetworkFirst,\n    NetworkOnly,\n    StaleWhileRevalidate\n};\nconst registerRuntimeCaching = (...runtimeCachingList)=>{\n    for (const rcEntry of runtimeCachingList){\n        if (typeof rcEntry.handler === \"string\") {\n            const { cacheName, networkTimeoutSeconds, fetchOptions, matchOptions, plugins, backgroundSync, broadcastUpdate, cacheableResponse, expiration, precacheFallback, rangeRequests } = rcEntry.options; // entry.options is always defined when entry.handler is of type 'string'.\n            const Handler = HANDLER_NAME_TO_METHOD[rcEntry.handler];\n            registerRoute(rcEntry.urlPattern, new Handler({\n                cacheName: cacheName ?? undefined,\n                networkTimeoutSeconds,\n                fetchOptions,\n                matchOptions,\n                plugins: [\n                    ...plugins ?? [],\n                    backgroundSync && new BackgroundSyncPlugin(backgroundSync.name, backgroundSync.options),\n                    broadcastUpdate && new BroadcastUpdatePlugin({\n                        // @ts-expect-error weird...\n                        channelName: broadcastUpdate.channelName,\n                        ...broadcastUpdate.options\n                    }),\n                    cacheableResponse && new CacheableResponsePlugin(cacheableResponse),\n                    expiration && new ExpirationPlugin(expiration),\n                    precacheFallback && new PrecacheFallbackPlugin(precacheFallback),\n                    rangeRequests ? new RangeRequestsPlugin() : undefined\n                ].filter(nonNullable)\n            }), rcEntry.method);\n        } else {\n            registerRoute(rcEntry.urlPattern, rcEntry.handler, rcEntry.method);\n        }\n    }\n};\n\n/**\n * A function that abstracts away the core APIs of Serwist.\n * @param options - `installSerwist` options.\n */ const installSerwist = ({ precacheEntries, precacheOptions, cleanupOutdatedCaches, skipWaiting: shouldSkipWaiting = false, importScripts: scriptsToImport, navigationPreload = false, cacheId, clientsClaim: shouldClaimClients = false, runtimeCaching, offlineAnalyticsConfig, disableDevLogs: shouldDisableDevLogs, fallbacks: fallbacksOptions, ...options })=>{\n    if (!!scriptsToImport && scriptsToImport.length > 0) self.importScripts(...scriptsToImport);\n    if (navigationPreload) enable();\n    if (cacheId !== undefined) setCacheNameDetails({\n        prefix: cacheId\n    });\n    if (shouldSkipWaiting) {\n        self.skipWaiting();\n    } else {\n        self.addEventListener(\"message\", (event)=>{\n            if (event.data && event.data.type === \"SKIP_WAITING\") {\n                self.skipWaiting();\n            }\n        });\n    }\n    if (shouldClaimClients) clientsClaim();\n    handlePrecaching({\n        precacheEntries,\n        precacheOptions,\n        cleanupOutdatedCaches,\n        ...options.navigateFallback && {\n            navigateFallback: options.navigateFallback,\n            navigateFallbackAllowlist: options.navigateFallbackAllowlist,\n            navigateFallbackDenylist: options.navigateFallbackDenylist\n        }\n    });\n    if (runtimeCaching !== undefined) {\n        if (fallbacksOptions !== undefined) {\n            runtimeCaching = fallbacks({\n                ...fallbacksOptions,\n                runtimeCaching\n            });\n        }\n        registerRuntimeCaching(...runtimeCaching);\n    }\n    if (offlineAnalyticsConfig !== undefined) {\n        if (typeof offlineAnalyticsConfig === \"boolean\") {\n            offlineAnalyticsConfig && initialize();\n        } else {\n            initialize(offlineAnalyticsConfig);\n        }\n    }\n    if (shouldDisableDevLogs) disableDevLogs();\n};\n\nexport { disableDevLogs, fallbacks, handlePrecaching, installSerwist, registerRuntimeCaching };\n","export namespace Env {\n  export const SENTRY_DSN = process.env.NEXT_PUBLIC_SENTRY_DSN || \"\";\n  export const ownerEmail = process.env.NEXT_PUBLIC_OWNER_EMAIL || \"\";\n  export const isLocal = process.env.MODE !== \"production\";\n  export const version = process.env.NEXT_PUBLIC_TAG_VERSION || \"local\";\n}\n","import { defaultCache } from \"@serwist/next/browser\";\nimport type { PrecacheEntry } from \"@serwist/precaching\";\nimport { installSerwist } from \"@serwist/sw\";\nimport { Env } from \"~/lib/Env\";\n\ndeclare const self: ServiceWorkerGlobalScope & {\n  // Change this attribute's name to your `injectionPoint`.\n  // `injectionPoint` is an InjectManifest option.\n  // See https://serwist.pages.dev/docs/build/inject-manifest/configuring\n  __SW_MANIFEST: (PrecacheEntry | string)[] | undefined;\n};\n\nif (!Env.isLocal) {\n  installSerwist({\n    precacheEntries: self.__SW_MANIFEST,\n    skipWaiting: true,\n    clientsClaim: true,\n    navigationPreload: true,\n    runtimeCaching: defaultCache,\n  });\n}\n"],"names":["Env","SENTRY_DSN","process","env","NEXT_PUBLIC_SENTRY_DSN","ownerEmail","NEXT_PUBLIC_OWNER_EMAIL","isLocal","MODE","version","NEXT_PUBLIC_TAG_VERSION","defaultCache","installSerwist","precacheEntries","self","__SW_MANIFEST","skipWaiting","clientsClaim","navigationPreload","runtimeCaching"],"sourceRoot":""}